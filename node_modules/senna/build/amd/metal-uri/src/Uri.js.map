{"version":3,"sources":["Uri.js"],"names":[],"mappings":"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","file":"node_modules/metal-uri/src/Uri.js","sourcesContent":["'use strict';\n\nimport { core, string } from 'metal';\nimport parse from './parse';\nimport MultiMap from 'metal-multimap';\n\nvar parseFn_ = parse;\n\nclass Uri {\n\n\t/**\n\t * This class contains setters and getters for the parts of the URI.\n\t * The following figure displays an example URIs and their component parts.\n\t *\n\t *                                  path\n\t *\t                             ┌───┴────┐\n\t *\t  abc://example.com:123/path/data?key=value#fragid1\n\t *\t  └┬┘   └────┬────┘ └┬┘           └───┬───┘ └──┬──┘\n\t * protocol  hostname  port            search    hash\n\t *          └──────┬───────┘\n\t *                host\n\t *\n\t * @param {*=} opt_uri Optional string URI to parse\n\t * @constructor\n\t */\n\tconstructor(opt_uri = '') {\n\t\tthis.url = Uri.parse(this.maybeAddProtocolAndHostname_(opt_uri));\n\t}\n\n\t/**\n\t * Adds parameters to uri from a <code>MultiMap</code> as source.\n\t * @param {MultiMap} multimap The <code>MultiMap</code> containing the\n\t *   parameters.\n\t * @protected\n\t * @chainable\n\t */\n\taddParametersFromMultiMap(multimap) {\n\t\tmultimap.names().forEach((name) => {\n\t\t\tmultimap.getAll(name).forEach((value) => {\n\t\t\t\tthis.addParameterValue(name, value);\n\t\t\t});\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the value of the named query parameters.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value. Will be explicitly casted to String.\n\t * @chainable\n\t */\n\taddParameterValue(name, value) {\n\t\tthis.ensureQueryInitialized_();\n\t\tif (core.isDef(value)) {\n\t\t\tvalue = String(value);\n\t\t}\n\t\tthis.query.add(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the values of the named query parameter.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\taddParameterValues(name, values) {\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ensures query internal map is initialized and synced with initial value\n\t * extracted from URI search part.\n\t * @protected\n\t */\n\tensureQueryInitialized_() {\n\t\tif (this.query) {\n\t\t\treturn;\n\t\t}\n\t\tthis.query = new MultiMap();\n\t\tvar search = this.url.search;\n\t\tif (search) {\n\t\t\tsearch.substring(1).split('&').forEach((param) => {\n\t\t\t\tvar [key, value] = param.split('=');\n\t\t\t\tif (core.isDef(value)) {\n\t\t\t\t\tvalue = Uri.urlDecode(value);\n\t\t\t\t}\n\t\t\t\tthis.addParameterValue(key, value);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Gets the hash part of uri.\n\t * @return {string}\n\t */\n\tgetHash() {\n\t\treturn this.url.hash || '';\n\t}\n\n\t/**\n\t * Gets the host part of uri. E.g. <code>[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetHost() {\n\t\tvar host = this.getHostname();\n\t\tif (host) {\n\t\t\tvar port = this.getPort();\n\t\t\tif (port && port !== '80') {\n\t\t\t\thost += ':' + port;\n\t\t\t}\n\t\t}\n\t\treturn host;\n\t}\n\n\t/**\n\t * Gets the hostname part of uri without protocol and port.\n\t * @return {string}\n\t */\n\tgetHostname() {\n\t\tvar hostname = this.url.hostname;\n\t\tif (hostname === Uri.HOSTNAME_PLACEHOLDER) {\n\t\t\treturn '';\n\t\t}\n\t\treturn hostname;\n\t}\n\n\t/**\n\t * Gets the origin part of uri. E.g. <code>http://[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetOrigin() {\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\treturn this.getProtocol() + '//' + host;\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns the first value for a given parameter or undefined if the given\n\t * parameter name does not appear in the query string.\n\t * @param {string} paramName Unescaped parameter name.\n\t * @return {string|undefined} The first value for a given parameter or\n\t *   undefined if the given parameter name does not appear in the query\n\t *   string.\n\t */\n\tgetParameterValue(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.get(name);\n\t}\n\n\t/**\n\t * Returns the value<b>s</b> for a given parameter as a list of decoded\n\t * query parameter values.\n\t * @param {string} name The parameter to get values for.\n\t * @return {!Array<?>} The values for a given parameter as a list of decoded\n\t *   query parameter values.\n\t */\n\tgetParameterValues(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.getAll(name);\n\t}\n\n\t/**\n\t * Returns the name<b>s</b> of the parameters.\n\t * @return {!Array<string>} The names for the parameters as a list of\n\t *   strings.\n\t */\n\tgetParameterNames() {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.names();\n\t}\n\n\t/**\n\t * Gets the function currently being used to parse URIs.\n\t * @return {!function()}\n\t */\n\tstatic getParseFn() {\n\t\treturn parseFn_;\n\t}\n\n\t/**\n\t * Gets the pathname part of uri.\n\t * @return {string}\n\t */\n\tgetPathname() {\n\t\treturn this.url.pathname;\n\t}\n\n\t/**\n\t * Gets the port number part of uri as string.\n\t * @return {string}\n\t */\n\tgetPort() {\n\t\treturn this.url.port;\n\t}\n\n\t/**\n\t * Gets the protocol part of uri. E.g. <code>http:</code>.\n\t * @return {string}\n\t */\n\tgetProtocol() {\n\t\treturn this.url.protocol;\n\t}\n\n\t/**\n\t * Gets the search part of uri. Search value is retrieved from query\n\t * parameters.\n\t * @return {string}\n\t */\n\tgetSearch() {\n\t\tvar search = '';\n\t\tvar querystring = '';\n\t\tthis.getParameterNames().forEach((name) => {\n\t\t\tthis.getParameterValues(name).forEach((value) => {\n\t\t\t\tquerystring += name;\n\t\t\t\tif (core.isDef(value)) {\n\t\t\t\t\tquerystring += '=' + encodeURIComponent(value);\n\t\t\t\t}\n\t\t\t\tquerystring += '&';\n\t\t\t});\n\t\t});\n\t\tquerystring = querystring.slice(0, -1);\n\t\tif (querystring) {\n\t\t\tsearch += '?' + querystring;\n\t\t}\n\t\treturn search;\n\t}\n\n\t/**\n\t * Checks if uri contains the parameter.\n\t * @param {string} name\n\t * @return {boolean}\n\t */\n\thasParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.contains(name);\n\t}\n\n\t/**\n\t * Makes this URL unique by adding a random param to it. Useful for avoiding\n\t * cache.\n\t */\n\tmakeUnique() {\n\t\tthis.setParameterValue(Uri.RANDOM_PARAM, string.getRandomString());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Maybe adds protocol and a hostname placeholder on a parial URI if needed.\n\t * Relevent for compatibility with <code>URL</code> native object.\n\t * @param {string=} opt_uri\n\t * @return {string} URI with protocol and hostname placeholder.\n\t */\n\tmaybeAddProtocolAndHostname_(opt_uri) {\n\t\tvar url = opt_uri;\n\t\tif (opt_uri.indexOf('://') === -1 &&\n\t\t\topt_uri.indexOf('javascript:') !== 0) { // jshint ignore:line\n\n\t\t\turl = Uri.DEFAULT_PROTOCOL;\n\t\t\tif (opt_uri[0] !== '/' || opt_uri[1] !== '/') {\n\t\t\t\turl += '//';\n\t\t\t}\n\n\t\t\tswitch (opt_uri.charAt(0)) {\n\t\t\t\tcase '.':\n\t\t\t\tcase '?':\n\t\t\t\tcase '#':\n\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\turl += '/';\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\tcase '/':\n\t\t\t\t\tif (opt_uri[1] !== '/') {\n\t\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\t}\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\turl += opt_uri;\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Normalizes the parsed object to be in the expected standard.\n\t * @param {!Object}\n\t */\n\tstatic normalizeObject(parsed) {\n\t\tvar length = parsed.pathname ? parsed.pathname.length : 0;\n\t\tif (length > 1 && parsed.pathname[length - 1] === '/') {\n\t\t\tparsed.pathname = parsed.pathname.substr(0, length - 1);\n\t\t}\n\t\treturn parsed;\n\t}\n\n\t/**\n\t * Parses the given uri string into an object.\n\t * @param {*=} opt_uri Optional string URI to parse\n\t */\n\tstatic parse(opt_uri) {\n\t\treturn Uri.normalizeObject(parseFn_(opt_uri));\n\t}\n\n\t/**\n\t * Removes the named query parameter.\n\t * @param {string} name The parameter to remove.\n\t * @chainable\n\t */\n\tremoveParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\tthis.query.remove(name);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes uniqueness parameter of the uri.\n\t * @chainable\n\t */\n\tremoveUnique() {\n\t\tthis.removeParameter(Uri.RANDOM_PARAM);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hash.\n\t * @param {string} hash\n\t * @chainable\n\t */\n\tsetHash(hash) {\n\t\tthis.url.hash = hash;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hostname.\n\t * @param {string} hostname\n\t * @chainable\n\t */\n\tsetHostname(hostname) {\n\t\tthis.url.hostname = hostname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValue(name, value) {\n\t\tthis.removeParameter(name);\n\t\tthis.addParameterValue(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the values of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValues(name, values) {\n\t\tthis.removeParameter(name);\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pathname.\n\t * @param {string} pathname\n\t * @chainable\n\t */\n\tsetPathname(pathname) {\n\t\tthis.url.pathname = pathname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the port number.\n\t * @param {*} port Port number.\n\t * @chainable\n\t */\n\tsetPort(port) {\n\t\tthis.url.port = port;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the function that will be used for parsing the original string uri\n\t * into an object.\n\t * @param {!function()} parseFn\n\t */\n\tstatic setParseFn(parseFn) {\n\t\tparseFn_ = parseFn;\n\t}\n\n\t/**\n\t * Sets the protocol. If missing <code>http:</code> is used as default.\n\t * @param {string} protocol\n\t * @chainable\n\t */\n\tsetProtocol(protocol) {\n\t\tthis.url.protocol = protocol;\n\t\tif (this.url.protocol[this.url.protocol.length - 1] !== ':') {\n\t\t\tthis.url.protocol += ':';\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @return {string} The string form of the url.\n\t * @override\n\t */\n\ttoString() {\n\t\tvar href = '';\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\thref += this.getProtocol() + '//';\n\t\t}\n\t\thref += host + this.getPathname() + this.getSearch() + this.getHash();\n\t\treturn href;\n\t}\n\n\t/**\n\t * Joins the given paths.\n\t * @param {string} basePath\n\t * @param {...string} ...paths Any number of paths to be joined with the base url.\n\t * @static\n\t */\n\tstatic joinPaths(basePath, ...paths) {\n\t\tif (basePath.charAt(basePath.length - 1) === '/') {\n\t\t\tbasePath = basePath.substring(0, basePath.length - 1);\n\t\t}\n\t\tpaths = paths.map(path => path.charAt(0) === '/' ? path.substring(1) : path);\n\t\treturn [basePath].concat(paths).join('/').replace(/\\/$/, '');\n\t}\n\n\t/**\n\t * URL-decodes the string. We need to specially handle '+'s because\n\t * the javascript library doesn't convert them to spaces.\n\t * @param {string} str The string to url decode.\n\t * @return {string} The decoded {@code str}.\n\t */\n\tstatic urlDecode(str) {\n\t\treturn decodeURIComponent(str.replace(/\\+/g, ' '));\n\t}\n\n}\n\n/**\n * Default protocol value.\n * @type {string}\n * @default http:\n * @static\n */\nUri.DEFAULT_PROTOCOL = 'http:';\n\n/**\n * Hostname placeholder. Relevant to internal usage only.\n * @type {string}\n * @static\n */\nUri.HOSTNAME_PLACEHOLDER = 'hostname' + Date.now();\n\n/**\n * Name used by the param generated by `makeUnique`.\n * @type {string}\n * @static\n */\nUri.RANDOM_PARAM = 'zx';\n\nexport default Uri;\n"],"sourceRoot":"/source/"}