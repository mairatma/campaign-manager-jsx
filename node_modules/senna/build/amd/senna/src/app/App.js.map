{"version":3,"sources":["App.js"],"names":[],"mappings":"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","file":"src/app/App.js","sourcesContent":["'use strict';\n\nimport { array, async, core } from 'metal';\nimport dom from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\nimport { EventEmitter, EventHandler } from 'metal-events';\nimport utils from '../utils/utils';\nimport globals from '../globals/globals';\nimport Route from '../route/Route';\nimport Screen from '../screen/Screen';\nimport Surface from '../surface/Surface';\nimport Uri from 'metal-uri';\n\nclass App extends EventEmitter {\n\n\t/**\n\t * App class that handle routes and screens lifecycle.\n\t * @constructor\n\t * @extends {EventEmitter}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the active screen.\n\t\t * @type {?Screen}\n\t\t * @protected\n\t\t */\n\t\tthis.activeScreen = null;\n\n\t\t/**\n\t\t * Holds the active path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.activePath = null;\n\n\t\t/**\n\t\t * Allows prevent navigate from dom prevented event.\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.allowPreventNavigate = true;\n\n\t\t/**\n\t\t * Holds link base path.\n\t\t * @type {!string}\n\t\t * @default ''\n\t\t * @protected\n\t\t */\n\t\tthis.basePath = '';\n\n\t\t/**\n\t\t * Captures scroll position from scroll event.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.captureScrollPositionFromScrollEvent = true;\n\n\t\t/**\n\t\t * Holds the default page title.\n\t\t * @type {string}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultTitle = globals.document.title;\n\n\t\t/**\n\t\t * Holds the form selector to define forms that are routed.\n\t\t * @type {!string}\n\t\t * @default form[enctype=\"multipart/form-data\"]:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.formSelector = 'form[enctype=\"multipart/form-data\"]:not([data-senna-off])';\n\n\t\t/**\n\t\t * Holds the link selector to define links that are routed.\n\t\t * @type {!string}\n\t\t * @default a:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.linkSelector = 'a:not([data-senna-off])';\n\n\t\t/**\n\t\t * Holds the loading css class.\n\t\t * @type {!string}\n\t\t * @default senna-loading\n\t\t * @protected\n\t\t */\n\t\tthis.loadingCssClass = 'senna-loading';\n\n\t\t/**\n\t\t * Using the History API to manage your URLs is awesome and, as it happens,\n\t\t * a crucial feature of good web apps. One of its downsides, however, is\n\t\t * that scroll positions are stored and then, more importantly, restored\n\t\t * whenever you traverse the history. This often means unsightly jumps as\n\t\t * the scroll position changes automatically, and especially so if your app\n\t\t * does transitions, or changes the contents of the page in any way.\n\t\t * Ultimately this leads to an horrible user experience. The good news is,\n\t\t * however, that there’s a potential fix: history.scrollRestoration.\n\t\t * https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.nativeScrollRestorationSupported = ('scrollRestoration' in globals.window.history);\n\n\t\t/**\n\t\t * Holds a deferred with the current navigation.\n\t\t * @type {?CancellablePromise}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.pendingNavigate = null;\n\n\t\t/**\n\t\t * Holds the window horizontal scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollLeft = 0;\n\n\t\t/**\n\t\t * Holds the window vertical scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollTop = 0;\n\n\t\t/**\n\t\t * Holds the redirect path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.redirectPath = null;\n\n\t\t/**\n\t\t * Holds the screen routes configuration.\n\t\t * @type {?Array}\n\t\t * @default []\n\t\t * @protected\n\t\t */\n\t\tthis.routes = [];\n\n\t\t/**\n\t\t * Maps the screen instances by the url containing the parameters.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.screens = {};\n\n\t\t/**\n\t\t * When set to true the first erroneous popstate fired on page load will be\n\t\t * ignored, only if <code>globals.window.history.state</code> is also\n\t\t * <code>null</code>.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.skipLoadPopstate = false;\n\n\t\t/**\n\t\t * Maps that index the surfaces instances by the surface id.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaces = {};\n\n\t\t/**\n\t\t * When set to true, moves the scroll position after popstate, or to the\n\t\t * top of the viewport for new navigation. If false, the browser will\n\t\t * take care of scroll restoration.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.updateScrollPosition = true;\n\n\t\tthis.appEventHandlers_ = new EventHandler();\n\n\t\tthis.appEventHandlers_.add(\n\t\t\tdom.on(globals.window, 'scroll', this.onScroll_.bind(this)),\n\t\t\tdom.on(globals.window, 'load', this.onLoad_.bind(this)),\n\t\t\tdom.on(globals.window, 'popstate', this.onPopstate_.bind(this))\n\t\t);\n\n\t\tthis.on('startNavigate', this.onStartNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigateDefault_, true);\n\n\t\tthis.setLinkSelector(this.linkSelector);\n\t\tthis.setFormSelector(this.formSelector);\n\t}\n\n\t/**\n\t * Adds one or more screens to the application.\n\t *\n\t * Example:\n\t *\n\t * <code>\n\t *   app.addRoutes({ path: '/foo', handler: FooScreen });\n\t *   or\n\t *   app.addRoutes([{ path: '/foo', handler: function(route) { return new FooScreen(); } }]);\n\t * </code>\n\t *\n\t * @param {Object} or {Array} routes Single object or an array of object.\n\t *     Each object should contain <code>path</code> and <code>screen</code>.\n\t *     The <code>path</code> should be a string or a regex that maps the\n\t *     navigation route to a screen class definition (not an instance), e.g:\n\t *         <code>{ path: \"/home:param1\", handler: MyScreen }</code>\n\t *         <code>{ path: /foo.+/, handler: MyScreen }</code>\n\t * @chainable\n\t */\n\taddRoutes(routes) {\n\t\tif (!Array.isArray(routes)) {\n\t\t\troutes = [routes];\n\t\t}\n\t\troutes.forEach((route) => {\n\t\t\tif (!(route instanceof Route)) {\n\t\t\t\troute = new Route(route.path, route.handler);\n\t\t\t}\n\t\t\tthis.routes.push(route);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds one or more surfaces to the application.\n\t * @param {Surface|String|Array.<Surface|String>} surfaces\n\t *     Surface element id or surface instance. You can also pass an Array\n\t *     whichcontains surface instances or id. In case of ID, these should be\n\t *     the id of surface element.\n\t * @chainable\n\t */\n\taddSurfaces(surfaces) {\n\t\tif (!Array.isArray(surfaces)) {\n\t\t\tsurfaces = [surfaces];\n\t\t}\n\t\tsurfaces.forEach((surface) => {\n\t\t\tif (core.isString(surface)) {\n\t\t\t\tsurface = new Surface(surface);\n\t\t\t}\n\t\t\tthis.surfaces[surface.getId()] = surface;\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns if can navigate to path.\n\t * @param {!string} url\n\t * @return {boolean}\n\t */\n\tcanNavigate(url) {\n\t\tvar path = utils.getUrlPath(url);\n\t\tvar uri = new Uri(url);\n\n\t\tif (!this.isLinkSameOrigin_(uri.getHostname())) {\n\t\t\tconsole.log('Offsite link clicked');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.isSameBasePath_(path)) {\n\t\t\tconsole.log('Link clicked outside app\\'s base path');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.findRoute(path)) {\n\t\t\tconsole.log('No route for ' + path);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Clear screens cache.\n\t * @chainable\n\t */\n\tclearScreensCache() {\n\t\tObject.keys(this.screens).forEach((path) => {\n\t\t\tif (path === this.activePath) {\n\t\t\t\tthis.activeScreen.clearCache();\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves or create a screen instance to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {Screen}\n\t */\n\tcreateScreenInstance(path, route) {\n\t\tif (!this.pendingNavigate && path === this.activePath) {\n\t\t\tconsole.log('Already at destination, refresh navigation');\n\t\t\treturn this.activeScreen;\n\t\t}\n\t\t/* jshint newcap: false */\n\t\tvar screen = this.screens[path];\n\t\tif (!screen) {\n\t\t\tvar handler = route.getHandler();\n\t\t\tif (handler === Screen || Screen.isImplementedBy(handler.prototype)) {\n\t\t\t\tscreen = new handler();\n\t\t\t} else {\n\t\t\t\tscreen = handler(route) || new Screen();\n\t\t\t}\n\t\t\tconsole.log('Create screen for [' + path + '] [' + screen + ']');\n\t\t}\n\t\treturn screen;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tif (this.activeScreen) {\n\t\t\tthis.removeScreen(this.activePath);\n\t\t}\n\t\tthis.clearScreensCache();\n\t\tthis.formEventHandler_.removeListener();\n\t\tthis.linkEventHandler_.removeListener();\n\t\tthis.appEventHandlers_.removeAllListeners();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Dispatches to the first route handler that matches the current path, if\n\t * any.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdispatch() {\n\t\treturn this.navigate(utils.getCurrentBrowserPath(), true);\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdoNavigate_(path, opt_replaceHistory) {\n\t\tif (this.activeScreen && this.activeScreen.beforeDeactivate()) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('Cancelled by active screen'));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tconsole.log('Navigate to [' + path + ']');\n\n\t\tthis.stopPendingNavigate_();\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => {\n\t\t\t\tif (this.activeScreen) {\n\t\t\t\t\tthis.activeScreen.deactivate();\n\t\t\t\t}\n\t\t\t\tthis.prepareNavigateHistory_(path, nextScreen, opt_replaceHistory);\n\t\t\t\tthis.prepareNavigateSurfaces_(nextScreen, this.surfaces);\n\t\t\t})\n\t\t\t.then(() => nextScreen.evaluateStyles(this.surfaces))\n\t\t\t.then(() => nextScreen.flip(this.surfaces))\n\t\t\t.then(() => nextScreen.evaluateScripts(this.surfaces))\n\t\t\t.then(() => this.syncScrollPositionSyncThenAsync_())\n\t\t\t.then(() => this.finalizeNavigate_(path, nextScreen))\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Finalizes a screen navigation.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @protected\n\t */\n\tfinalizeNavigate_(path, nextScreen) {\n\t\tnextScreen.activate();\n\n\t\tif (this.activeScreen && !this.activeScreen.isCacheable()) {\n\t\t\tif (this.activeScreen !== nextScreen) {\n\t\t\t\tthis.removeScreen(this.activePath);\n\t\t\t}\n\t\t}\n\n\t\tthis.activePath = path;\n\t\tthis.activeScreen = nextScreen;\n\t\tthis.screens[path] = nextScreen;\n\t\tthis.pendingNavigate = null;\n\t\tglobals.capturedFormElement = null;\n\t\tconsole.log('Navigation done');\n\t}\n\n\t/**\n\t * Finds a route for the test path. Returns true if matches has a route,\n\t * otherwise returns null.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {?Object} Route handler if match any or <code>null</code> if the\n\t *     path is the same as the current url and the path contains a fragment.\n\t */\n\tfindRoute(path) {\n\t\t// Prevents navigation if it's a hash change on the same url.\n\t\tif ((path.lastIndexOf('#') > -1) && utils.isCurrentBrowserPath(path)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tpath = utils.getUrlPathWithoutHash(path);\n\n\t\t// Makes sure that the path substring will be in the expected format\n\t\t// (that is, will end with a \"/\").\n\t\tpath = utils.getUrlPathWithoutHash(path.substr(this.basePath.length));\n\n\t\tfor (var i = 0; i < this.routes.length; i++) {\n\t\t\tvar route = this.routes[i];\n\t\t\tif (route.matchesPath(path)) {\n\t\t\t\treturn route;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets allow prevent navigate.\n\t * @return {boolean}\n\t */\n\tgetAllowPreventNavigate() {\n\t\treturn this.allowPreventNavigate;\n\t}\n\n\t/**\n\t * Gets link base path.\n\t * @return {!string}\n\t */\n\tgetBasePath() {\n\t\treturn this.basePath;\n\t}\n\n\t/**\n\t * Gets the default page title.\n\t * @return {string} defaultTitle\n\t */\n\tgetDefaultTitle() {\n\t\treturn this.defaultTitle;\n\t}\n\n\t/**\n\t * Gets the form selector.\n\t * @return {!string}\n\t */\n\tgetFormSelector() {\n\t\treturn this.formSelector;\n\t}\n\n\t/**\n\t * Gets the link selector.\n\t * @return {!string}\n\t */\n\tgetLinkSelector() {\n\t\treturn this.linkSelector;\n\t}\n\n\t/**\n\t * Gets the loading css class.\n\t * @return {!string}\n\t */\n\tgetLoadingCssClass() {\n\t\treturn this.loadingCssClass;\n\t}\n\n\t/**\n\t * Gets the update scroll position value.\n\t * @return {boolean}\n\t */\n\tgetUpdateScrollPosition() {\n\t\treturn this.updateScrollPosition;\n\t}\n\n\t/**\n\t * Handle navigation error.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {!Error} error\n\t * @protected\n\t */\n\thandleNavigateError_(path, nextScreen, err) {\n\t\tconsole.log('Navigation error for [' + nextScreen + '] (' + err + ')');\n\t\tif (!utils.isCurrentBrowserPath(path)) {\n\t\t\tthis.removeScreen(path);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if app has routes.\n\t * @return {boolean}\n\t */\n\thasRoutes() {\n\t\treturn this.routes.length > 0;\n\t}\n\n\t/**\n\t * Tests if hostname is an offsite link.\n\t * @param {!string} hostname Link hostname to compare with\n\t *     <code>globals.window.location.hostname</code>.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisLinkSameOrigin_(hostname) {\n\t\treturn hostname === globals.window.location.hostname;\n\t}\n\n\t/**\n\t * Tests if link element has the same app's base path.\n\t * @param {!string} path Link path containing the querystring part.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisSameBasePath_(path) {\n\t\treturn path.indexOf(this.basePath) === 0;\n\t}\n\n\t/**\n\t * Lock the document scroll in order to avoid the browser native back and\n\t * forward navigation to change the scroll position. In the end of\n\t * navigation lifecycle scroll is repositioned.\n\t * @protected\n\t */\n\tlockHistoryScrollPosition_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\t\t// Browsers are inconsistent when re-positioning the scroll history on\n\t\t// popstate. At some browsers, history scroll happens before popstate, then\n\t\t// lock the scroll on the last known position as soon as possible after the\n\t\t// current JS execution context and capture the current value. Some others,\n\t\t// history scroll happens after popstate, in this case, we bind an once\n\t\t// scroll event to lock the las known position. Lastly, the previous two\n\t\t// behaviors can happen even on the same browser, hence the race will decide\n\t\t// the winner.\n\t\tvar winner = false;\n\t\tvar switchScrollPositionRace = function() {\n\t\t\tglobals.document.removeEventListener('scroll', switchScrollPositionRace, false);\n\t\t\tif (!winner) {\n\t\t\t\tglobals.window.scrollTo(state.scrollLeft, state.scrollTop);\n\t\t\t\twinner = true;\n\t\t\t}\n\t\t};\n\t\tasync.nextTick(switchScrollPositionRace);\n\t\tglobals.document.addEventListener('scroll', switchScrollPositionRace, false);\n\t}\n\n\t/**\n\t * If supported by the browser, disables native scroll restoration and\n\t * stores current value.\n\t */\n\tmaybeDisableNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported) {\n\t\t\tthis.nativeScrollRestoration_ = globals.window.history.scrollRestoration;\n\t\t\tglobals.window.history.scrollRestoration = 'manual';\n\t\t}\n\t}\n\n\t/**\n\t * Maybe navigate to a path.\n\t * @param {string} href Information about the link's href.\n\t * @param {Event} event Dom event that initiated the navigation.\n\t */\n\tmaybeNavigate_(href, event) {\n\t\tif (!this.canNavigate(href)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.allowPreventNavigate && event.defaultPrevented) {\n\t\t\tconsole.log('Navigate prevented');\n\t\t\treturn;\n\t\t}\n\n\t\tglobals.capturedFormElement = event.capturedFormElement;\n\n\t\tvar navigateFailed = false;\n\t\ttry {\n\t\t\tthis.navigate(utils.getUrlPath(href));\n\t\t} catch (err) {\n\t\t\t// Do not prevent link navigation in case some synchronous error occurs\n\t\t\tnavigateFailed = true;\n\t\t}\n\n\t\tif (!navigateFailed) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Maybe reposition scroll to hashed anchor.\n\t */\n\tmaybeRepositionScrollToHashedAnchor() {\n\t\tvar hash = globals.window.location.hash;\n\t\tif (hash) {\n\t\t\tvar anchorElement = globals.document.getElementById(hash.substring(1));\n\t\t\tif (anchorElement) {\n\t\t\t\tglobals.window.scrollTo(anchorElement.offsetLeft, anchorElement.offsetTop);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * If supported by the browser, restores native scroll restoration to the\n\t * value captured by `maybeDisableNativeScrollRestoration`.\n\t */\n\tmaybeRestoreNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported && this.nativeScrollRestoration_) {\n\t\t\tglobals.window.history.scrollRestoration = this.nativeScrollRestoration_;\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tnavigate(path, opt_replaceHistory) {\n\t\tif (!utils.isHtml5HistorySupported()) {\n\t\t\tthrow new Error('HTML5 History is not supported. Senna will not intercept navigation.');\n\t\t}\n\n\t\t// When reloading the same path do replaceState instead of pushState to\n\t\t// avoid polluting history with states with the same path.\n\t\tif (path === this.activePath) {\n\t\t\topt_replaceHistory = true;\n\t\t}\n\n\t\tthis.emit('beforeNavigate', {\n\t\t\tpath: path,\n\t\t\treplaceHistory: !!opt_replaceHistory\n\t\t});\n\n\t\treturn this.pendingNavigate;\n\t}\n\n\t/**\n\t * Befores navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigate_(event) {\n\t\tif (globals.capturedFormElement) {\n\t\t\tevent.form = globals.capturedFormElement;\n\t\t}\n\t}\n\n\t/**\n\t * Befores navigation to a path. Runs after external listeners.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigateDefault_(event) {\n\t\tif (this.pendingNavigate) {\n\t\t\tif (this.pendingNavigate.path === event.path) {\n\t\t\t\tconsole.log('Waiting...');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.emit('startNavigate', {\n\t\t\tform: event.form,\n\t\t\tpath: event.path,\n\t\t\treplaceHistory: event.replaceHistory\n\t\t});\n\t}\n\n\t/**\n\t * Intercepts document clicks and test link elements in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocClickDelegate_(event) {\n\t\tif (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.button) {\n\t\t\tconsole.log('Navigate aborted, invalid mouse button or modifier key pressed.');\n\t\t\treturn;\n\t\t}\n\t\tthis.maybeNavigate_(event.delegateTarget.href, event);\n\t}\n\n\t/**\n\t * Intercepts document form submits and test action path in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocSubmitDelegate_(event) {\n\t\tvar form = event.delegateTarget;\n\t\tif (form.method === 'get') {\n\t\t\tconsole.log('GET method not supported');\n\t\t\treturn;\n\t\t}\n\t\tevent.capturedFormElement = form;\n\t\tthis.maybeNavigate_(form.action, event);\n\t}\n\n\t/**\n\t * Listens to the window's load event in order to avoid issues with some browsers\n\t * that trigger popstate calls on the first load. For more information see\n\t * http://stackoverflow.com/questions/6421769/popstate-on-pages-load-in-chrome.\n\t * @protected\n\t */\n\tonLoad_() {\n\t\tthis.skipLoadPopstate = true;\n\t\tsetTimeout(() => {\n\t\t\t// The timeout ensures that popstate events will be unblocked right\n\t\t\t// after the load event occured, but not in the same event-loop cycle.\n\t\t\tthis.skipLoadPopstate = false;\n\t\t}, 0);\n\t\t// Try to reposition scroll to the hashed anchor when page loads.\n\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t}\n\n\t/**\n\t * Handles browser history changes and fires app's navigation if the state\n\t * belows to us. If we detect a popstate and the state is <code>null</code>,\n\t * assume it is navigating to an external page or to a page we don't have\n\t * route, then <code>globals.window.location.reload()</code> is invoked in order to\n\t * reload the content to the current url.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonPopstate_(event) {\n\t\tif (this.skipLoadPopstate) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar state = event.state;\n\n\t\tif (!state) {\n\t\t\tif (globals.window.location.hash) {\n\t\t\t\t// If senna is on an redirect path and a hash popstate happens\n\t\t\t\t// to a different url, reload the browser. This behavior doesn't\n\t\t\t\t// require senna to route hashed links and is closer to native\n\t\t\t\t// browser behavior.\n\t\t\t\tif (this.redirectPath && !utils.isCurrentBrowserPath(this.redirectPath)) {\n\t\t\t\t\tthis.reloadPage();\n\t\t\t\t}\n\t\t\t\t// Always try to reposition scroll to the hashed anchor when\n\t\t\t\t// hash popstate happens.\n\t\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\t} else {\n\t\t\t\tthis.reloadPage();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (state.senna) {\n\t\t\tconsole.log('History navigation to [' + state.path + ']');\n\t\t\tthis.popstateScrollTop = state.scrollTop;\n\t\t\tthis.popstateScrollLeft = state.scrollLeft;\n\t\t\tif (!this.nativeScrollRestorationSupported) {\n\t\t\t\tthis.lockHistoryScrollPosition_();\n\t\t\t}\n\t\t\tthis.navigate(state.path, true);\n\t\t}\n\t}\n\n\t/**\n\t * Listens document scroll changes in order to capture the possible lock\n\t * scroll position for history scrolling.\n\t * @protected\n\t */\n\tonScroll_() {\n\t\tif (this.captureScrollPositionFromScrollEvent) {\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_();\n\t\t}\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonStartNavigate_(event) {\n\t\tthis.maybeDisableNativeScrollRestoration();\n\t\tthis.captureScrollPositionFromScrollEvent = false;\n\t\tdom.addClasses(globals.document.documentElement, this.loadingCssClass);\n\n\t\tvar endNavigatePayload = {\n\t\t\tform: event.form,\n\t\t\tpath: event.path\n\t\t};\n\n\t\tthis.pendingNavigate = this.doNavigate_(event.path, event.replaceHistory)\n\t\t\t.catch((reason) => {\n\t\t\t\tendNavigatePayload.error = reason;\n\t\t\t\tthrow reason;\n\t\t\t})\n\t\t\t.thenAlways(() => {\n\t\t\t\tif (!this.pendingNavigate) {\n\t\t\t\t\tdom.removeClasses(globals.document.documentElement, this.loadingCssClass);\n\t\t\t\t\tthis.maybeRestoreNativeScrollRestoration();\n\t\t\t\t\tthis.captureScrollPositionFromScrollEvent = true;\n\t\t\t\t}\n\t\t\t\tthis.emit('endNavigate', endNavigatePayload);\n\t\t\t});\n\n\t\tthis.pendingNavigate.path = event.path;\n\t}\n\n\t/**\n\t * Prefetches the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tprefetch(path) {\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\treturn CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t}\n\n\t\tconsole.log('Prefetching [' + path + ']');\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => this.screens[path] = nextScreen)\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t */\n\tprepareNavigateHistory_(path, nextScreen, opt_replaceHistory) {\n\t\tvar title = nextScreen.getTitle();\n\t\tif (!core.isString(title)) {\n\t\t\ttitle = this.getDefaultTitle();\n\t\t}\n\t\tvar redirectPath = nextScreen.beforeUpdateHistoryPath(path);\n\t\tvar historyState = {\n\t\t\tform: core.isDefAndNotNull(globals.capturedFormElement),\n\t\t\tredirectPath: redirectPath,\n\t\t\tpath: path,\n\t\t\tsenna: true,\n\t\t\tscrollTop: 0,\n\t\t\tscrollLeft: 0\n\t\t};\n\t\tif (opt_replaceHistory) {\n\t\t\thistoryState.scrollTop = this.popstateScrollTop;\n\t\t\thistoryState.scrollLeft = this.popstateScrollLeft;\n\t\t}\n\t\tthis.updateHistory_(title, redirectPath, nextScreen.beforeUpdateHistoryState(historyState), opt_replaceHistory);\n\t\tthis.redirectPath = redirectPath;\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!Screen} nextScreen\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t */\n\tprepareNavigateSurfaces_(nextScreen, surfaces) {\n\t\tObject.keys(surfaces).forEach((id) => {\n\t\t\tvar surfaceContent = nextScreen.getSurfaceContent(id);\n\t\t\tsurfaces[id].addContent(nextScreen.getId(), surfaceContent);\n\t\t\tconsole.log('Screen [' + nextScreen.getId() + '] add content to surface ' +\n\t\t\t\t'[' + surfaces[id] + '] [' + (core.isDefAndNotNull(surfaceContent) ? '...' : 'empty') + ']');\n\t\t});\n\t}\n\n\t/**\n\t * Reloads the page by performing `window.location.reload()`.\n\t */\n\treloadPage() {\n\t\tglobals.window.location.reload();\n\t}\n\n\t/**\n\t * Removes route instance from app routes.\n\t * @param {Route} route\n\t * @return {boolean} True if an element was removed.\n\t */\n\tremoveRoute(route) {\n\t\treturn array.remove(this.routes, route);\n\t}\n\n\t/**\n\t * Removes a screen.\n\t * @param {!string} path Path containing the querystring part.\n\t */\n\tremoveScreen(path) {\n\t\tvar screen = this.screens[path];\n\t\tif (screen) {\n\t\t\tObject.keys(this.surfaces).forEach((surfaceId) => this.surfaces[surfaceId].remove(screen.getId()));\n\t\t\tscreen.dispose();\n\t\t\tdelete this.screens[path];\n\t\t}\n\t}\n\n\t/**\n\t * Saves scroll position from page offset into history state.\n\t */\n\tsaveHistoryCurrentPageScrollPosition_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (state && state.senna) {\n\t\t\tstate.scrollTop = globals.window.pageYOffset;\n\t\t\tstate.scrollLeft = globals.window.pageXOffset;\n\t\t\tglobals.window.history.replaceState(state, null, null);\n\t\t}\n\t}\n\n\t/**\n\t * Sets allow prevent navigate.\n\t * @param {boolean} allowPreventNavigate\n\t */\n\tsetAllowPreventNavigate(allowPreventNavigate) {\n\t\tthis.allowPreventNavigate = allowPreventNavigate;\n\t}\n\n\t/**\n\t * Sets link base path.\n\t * @param {!string} path\n\t */\n\tsetBasePath(basePath) {\n\t\tthis.basePath = basePath;\n\t}\n\n\t/**\n\t * Sets the default page title.\n\t * @param {string} defaultTitle\n\t */\n\tsetDefaultTitle(defaultTitle) {\n\t\tthis.defaultTitle = defaultTitle;\n\t}\n\n\t/**\n\t * Sets the form selector.\n\t * @param {!string} formSelector\n\t */\n\tsetFormSelector(formSelector) {\n\t\tthis.formSelector = formSelector;\n\t\tif (this.formEventHandler_) {\n\t\t\tthis.formEventHandler_.removeListener();\n\t\t}\n\t\tthis.formEventHandler_ = dom.delegate(document, 'submit', this.formSelector, this.onDocSubmitDelegate_.bind(this));\n\t}\n\n\t/**\n\t * Sets the link selector.\n\t * @param {!string} linkSelector\n\t */\n\tsetLinkSelector(linkSelector) {\n\t\tthis.linkSelector = linkSelector;\n\t\tif (this.linkEventHandler_) {\n\t\t\tthis.linkEventHandler_.removeListener();\n\t\t}\n\t\tthis.linkEventHandler_ = dom.delegate(document, 'click', this.linkSelector, this.onDocClickDelegate_.bind(this));\n\t}\n\n\t/**\n\t * Sets the loading css class.\n\t * @param {!string} loadingCssClass\n\t */\n\tsetLoadingCssClass(loadingCssClass) {\n\t\tthis.loadingCssClass = loadingCssClass;\n\t}\n\n\t/**\n\t * Sets the update scroll position value.\n\t * @param {boolean} updateScrollPosition\n\t */\n\tsetUpdateScrollPosition(updateScrollPosition) {\n\t\tthis.updateScrollPosition = updateScrollPosition;\n\t}\n\n\t/**\n\t * Cancels pending navigate with <code>Cancel pending navigation</code> error.\n\t * @protected\n\t */\n\tstopPendingNavigate_() {\n\t\tif (this.pendingNavigate) {\n\t\t\tthis.pendingNavigate.cancel('Cancel pending navigation');\n\t\t\tthis.pendingNavigate = null;\n\t\t}\n\t}\n\n\t/**\n\t * Sync document scroll position twice, the first one synchronous and then\n\t * one inside <code>async.nextTick</code>. Relevant to browsers that fires\n\t * scroll restoration asynchronously after popstate.\n\t * @protected\n\t * @return {?CancellablePromise=}\n\t */\n\tsyncScrollPositionSyncThenAsync_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar scrollTop = state.scrollTop;\n\t\tvar scrollLeft = state.scrollLeft;\n\n\t\tvar sync = () => {\n\t\t\tif (this.updateScrollPosition) {\n\t\t\t\tglobals.window.scrollTo(scrollLeft, scrollTop);\n\t\t\t}\n\t\t};\n\n\t\treturn new CancellablePromise((resolve) => sync() & async.nextTick(() => sync() & resolve()));\n\t}\n\n\t/**\n\t * Updates or replace browser history.\n\t * @param {?string} title Document title.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!object} state\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @protected\n\t */\n\tupdateHistory_(title, path, state, opt_replaceHistory) {\n\t\tif (opt_replaceHistory) {\n\t\t\tglobals.window.history.replaceState(state, title, path);\n\t\t} else {\n\t\t\tglobals.window.history.pushState(state, title, path);\n\t\t}\n\t\tglobals.document.title = title;\n\t}\n\n}\n\nexport default App;\n"],"sourceRoot":"/source/"}