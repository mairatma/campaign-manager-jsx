{"version":3,"sources":["Cacheable.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAIM;;;;;;;;AAML,WANK,SAML,GAAc;yBANT,WAMS;;gDACb,wBADa;;;;;;;;AASb,SAAK,KAAL,GAAa,IAAb;;;;;;;;AATa,QAiBb,CAAK,SAAL,GAAiB,KAAjB,CAjBa;;GAAd;;;;;;;;;AANK,sBA+BL,6BAAS,SAAS;AACjB,OAAI,KAAK,SAAL,EAAgB;AACnB,SAAK,KAAL,GAAa,OAAb,CADmB;IAApB;AAGA,UAAO,IAAP,CAJiB;;;AA/Bb,sBA0CL,mCAAa;AACZ,QAAK,KAAL,GAAa,IAAb,CADY;AAEZ,UAAO,IAAP,CAFY;;;AA1CR,sBAmDL,6CAAkB;AACjB,QAAK,UAAL,GADiB;;;AAnDb,sBA4DL,+BAAW;AACV,UAAO,KAAK,KAAL,CADG;;;AA5DN,sBAoEL,qCAAc;AACb,UAAO,KAAK,SAAL,CADM;;;AApET,sBA4EL,qCAAa,WAAW;AACvB,OAAI,CAAC,SAAD,EAAY;AACf,SAAK,UAAL,GADe;IAAhB;AAGA,QAAK,SAAL,GAAiB,SAAjB,CAJuB;;;SA5EnB;;;mBAqFS","file":"src/cacheable/Cacheable.js","sourcesContent":["'use strict';\n\nimport { Disposable } from 'metal';\n\nclass Cacheable extends Disposable {\n\n\t/**\n\t * Abstract class for defining cacheable behavior.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the cached data.\n\t\t * @type {!Object}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.cache = null;\n\n\t\t/**\n\t\t * Holds whether class is cacheable.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.cacheable = false;\n\t}\n\n\t/**\n\t * Adds content to the cache.\n\t * @param {string} content Content to be cached.\n\t * @chainable\n\t */\n\taddCache(content) {\n\t\tif (this.cacheable) {\n\t\t\tthis.cache = content;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears the cache.\n\t * @chainable\n\t */\n\tclearCache() {\n\t\tthis.cache = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.clearCache();\n\t}\n\n\t/**\n\t * Gets the cached content.\n\t * @return {Object} Cached content.\n\t * @protected\n\t */\n\tgetCache() {\n\t\treturn this.cache;\n\t}\n\n\t/**\n\t * Whether the class is cacheable.\n\t * @return {boolean} Returns true when class is cacheable, false otherwise.\n\t */\n\tisCacheable() {\n\t\treturn this.cacheable;\n\t}\n\n\t/**\n\t * Sets whether the class is cacheable.\n\t * @param {boolean} cacheable\n\t */\n\tsetCacheable(cacheable) {\n\t\tif (!cacheable) {\n\t\t\tthis.clearCache();\n\t\t}\n\t\tthis.cacheable = cacheable;\n\t}\n\n}\n\nexport default Cacheable;\n"],"sourceRoot":"/source/"}