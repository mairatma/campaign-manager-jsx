{"version":3,"sources":["Route.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;KAIM;;;;;;;;;AAQL,WARK,KAQL,CAAY,IAAZ,EAAkB,OAAlB,EAA2B;yBARtB,OAQsB;;AAC1B,OAAI,CAAC,YAAK,eAAL,CAAqB,IAArB,CAAD,EAA6B;AAChC,UAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN,CADgC;IAAjC;AAGA,OAAI,CAAC,YAAK,UAAL,CAAgB,OAAhB,CAAD,EAA2B;AAC9B,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN,CAD8B;IAA/B;;;;;;;;AAJ0B,OAc1B,CAAK,OAAL,GAAe,OAAf;;;;;;;AAd0B,OAqB1B,CAAK,IAAL,GAAY,IAAZ,CArB0B;GAA3B;;;;;;;;AARK,kBAoCL,mCAAa;AACZ,UAAO,KAAK,OAAL,CADK;;;AApCR,kBA4CL,6BAAU;AACT,UAAO,KAAK,IAAL,CADE;;;AA5CL,kBAsDL,mCAAY,OAAO;AAClB,OAAI,OAAO,KAAK,IAAL,CADO;;AAGlB,OAAI,YAAK,QAAL,CAAc,IAAd,CAAJ,EAAyB;AACxB,WAAO,UAAU,IAAV,CADiB;IAAzB;AAGA,OAAI,YAAK,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AAC1B,WAAO,KAAK,KAAL,CAAP,CAD0B;IAA3B;AAGA,OAAI,gBAAgB,MAAhB,EAAwB;AAC3B,WAAO,MAAM,MAAN,CAAa,IAAb,IAAqB,CAAC,CAAD,CADD;IAA5B;;AAIA,UAAO,KAAP,CAbkB;;;SAtDd;;;mBAwES","file":"src/route/Route.js","sourcesContent":["'use strict';\n\nimport { core } from 'metal';\n\nclass Route {\n\n\t/**\n\t * Route class.\n\t * @param {!string|RegExp|Function} path\n\t * @param {!Function} handler\n\t * @constructor\n\t */\n\tconstructor(path, handler) {\n\t\tif (!core.isDefAndNotNull(path)) {\n\t\t\tthrow new Error('Route path not specified.');\n\t\t}\n\t\tif (!core.isFunction(handler)) {\n\t\t\tthrow new Error('Route handler is not a function.');\n\t\t}\n\n\t\t/**\n\t\t * Defines the handler which will execute once a URL in the application\n\t\t * matches the path.\n\t\t * @type {!Function}\n\t\t * @protected\n\t\t */\n\t\tthis.handler = handler;\n\n\t\t/**\n\t\t * Defines the path which will trigger the route handler.\n\t\t * @type {!string|RegExp|Function}\n\t\t * @protected\n\t\t */\n\t\tthis.path = path;\n\t}\n\n\t/**\n\t * Gets the route handler.\n\t * @return {!Function}\n\t */\n\tgetHandler() {\n\t\treturn this.handler;\n\t}\n\n\t/**\n\t * Gets the route path.\n\t * @return {!string|RegExp|Function}\n\t */\n\tgetPath() {\n\t\treturn this.path;\n\t}\n\n\t/**\n\t * Matches if the router can handle the tested path.\n\t * @param {!string} value Path to test and may contains the querystring\n\t *     part.\n\t * @return {Boolean} Returns true if matches any route.\n\t */\n\tmatchesPath(value) {\n\t\tvar path = this.path;\n\n\t\tif (core.isString(path)) {\n\t\t\treturn value === path;\n\t\t}\n\t\tif (core.isFunction(path)) {\n\t\t\treturn path(value);\n\t\t}\n\t\tif (path instanceof RegExp) {\n\t\t\treturn value.search(path) > -1;\n\t\t}\n\n\t\treturn false;\n\t}\n\n}\n\nexport default Route;\n"],"sourceRoot":"/source/"}