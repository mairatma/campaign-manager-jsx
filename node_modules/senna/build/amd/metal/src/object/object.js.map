{"version":3,"sources":["object.js"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;KAIM;;;;;SAOE,uBAAM,QAAQ;AACpB,OAAI,GAAJ,EAAS,MAAT,CADoB;AAEpB,QAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,UAAU,MAAV,EAAkB,GAAtC,EAA2C;AAC1C,aAAS,UAAU,CAAV,CAAT,CAD0C;AAE1C,SAAK,GAAL,IAAY,MAAZ,EAAoB;AACnB,YAAO,GAAP,IAAc,OAAO,GAAP,CAAd,CADmB;KAApB;IAFD;AAMA,UAAO,MAAP,CARoB;;;AAPhB,SAyBE,2CAAgB,MAAM,SAAS;AACrC,OAAI,QAAQ,KAAK,KAAL,CAAW,GAAX,CAAR,CADiC;AAErC,OAAI,MAAM,WAAW,MAAX,CAF2B;AAGrC,OAAI,IAAJ,CAHqC;AAIrC,UAAQ,OAAO,MAAM,KAAN,EAAP,EAAuB;AAC9B,QAAI,eAAK,eAAL,CAAqB,IAAI,IAAJ,CAArB,CAAJ,EAAqC;AACpC,WAAM,IAAI,IAAJ,CAAN,CADoC;KAArC,MAEO;AACN,YAAO,IAAP,CADM;KAFP;IADD;AAOA,UAAO,GAAP,CAXqC;;;AAzBjC,SA8CE,mBAAI,KAAK,IAAI;AACnB,OAAI,YAAY,EAAZ,CADe;AAEnB,OAAI,OAAO,OAAO,IAAP,CAAY,GAAZ,CAAP,CAFe;AAGnB,QAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,GAAjC,EAAsC;AACrC,cAAU,KAAK,CAAL,CAAV,IAAqB,GAAG,KAAK,CAAL,CAAH,EAAY,IAAI,KAAK,CAAL,CAAJ,CAAZ,CAArB,CADqC;IAAtC;AAGA,UAAO,SAAP,CANmB;;;SA9Cf;;;mBAwDS","file":"node_modules/metal/src/object/object.js","sourcesContent":["'use strict';\n\nimport core from '../core';\n\nclass object {\n\t/**\n\t * Copies all the members of a source object to a target object.\n\t * @param {Object} target Target object.\n\t * @param {...Object} var_args The objects from which values will be copied.\n\t * @return {Object} Returns the target object reference.\n\t */\n\tstatic mixin(target) {\n\t\tvar key, source;\n\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\tsource = arguments[i];\n\t\t\tfor (key in source) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Returns an object based on its fully qualified external name.\n\t * @param {string} name The fully qualified name.\n\t * @param {object=} opt_obj The object within which to look; default is\n\t *     <code>window</code>.\n\t * @return {?} The value (object or primitive) or, if not found, null.\n\t */\n\tstatic getObjectByName(name, opt_obj) {\n\t\tvar parts = name.split('.');\n\t\tvar cur = opt_obj || window;\n\t\tvar part;\n\t\twhile ((part = parts.shift())) {\n\t\t\tif (core.isDefAndNotNull(cur[part])) {\n\t\t\t\tcur = cur[part];\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn cur;\n\t}\n\n\t/**\n\t * Returns a new object with the same keys as the given one, but with\n\t * their values set to the return values of the specified function.\n\t * @param {!Object} obj\n\t * @param {!function(string, *)} fn\n\t * @return {!Object}\n\t */\n\tstatic map(obj, fn) {\n\t\tvar mappedObj = {};\n\t\tvar keys = Object.keys(obj);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tmappedObj[keys[i]] = fn(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn mappedObj;\n\t}\n}\n\nexport default object;\n"],"sourceRoot":"/source/"}