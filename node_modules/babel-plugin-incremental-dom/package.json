{
  "_args": [
    [
      "babel-plugin-incremental-dom@github:mairatma/babel-plugin-incremental-dom#componentAsReferenceBuild",
      "/Users/maira/Documents/Liferay/repos/campaign-manager-jsx-gh-pages"
    ]
  ],
  "_from": "mairatma/babel-plugin-incremental-dom#componentAsReferenceBuild",
  "_id": "babel-plugin-incremental-dom@3.0.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/babel-plugin-incremental-dom",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/mairatma/babel-plugin-incremental-dom/componentAsReferenceBuild/package.json",
      "gitUrl": "git://github.com/mairatma/babel-plugin-incremental-dom.git#componentAsReferenceBuild",
      "httpsUrl": "git+https://github.com/mairatma/babel-plugin-incremental-dom.git#componentAsReferenceBuild",
      "shortcut": "github:mairatma/babel-plugin-incremental-dom#componentAsReferenceBuild",
      "ssh": "git@github.com:mairatma/babel-plugin-incremental-dom.git#componentAsReferenceBuild",
      "sshUrl": "git+ssh://git@github.com/mairatma/babel-plugin-incremental-dom.git#componentAsReferenceBuild",
      "type": "github"
    },
    "name": "babel-plugin-incremental-dom",
    "raw": "babel-plugin-incremental-dom@github:mairatma/babel-plugin-incremental-dom#componentAsReferenceBuild",
    "rawSpec": "github:mairatma/babel-plugin-incremental-dom#componentAsReferenceBuild",
    "scope": null,
    "spec": "github:mairatma/babel-plugin-incremental-dom#componentAsReferenceBuild",
    "type": "hosted"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/mairatma/babel-plugin-incremental-dom.git#9e72b94da729346c9a2fcd70b37401893683426c",
  "_shasum": "82eac84127be82cf85f1d79badcd1c810d649dd3",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-incremental-dom@github:mairatma/babel-plugin-incremental-dom#componentAsReferenceBuild",
  "_where": "/Users/maira/Documents/Liferay/repos/campaign-manager-jsx-gh-pages",
  "bugs": {
    "url": "https://github.com/jridgewell/babel-plugin-incremental-dom/issues"
  },
  "dependencies": {},
  "description": "Turn jsx into incremental-dom",
  "devDependencies": {
    "babel": "^6.0.0",
    "babel-cli": "^6.0.0",
    "babel-core": "^6.0.0",
    "babel-eslint": "^4.0.0",
    "babel-preset-es2015": "^6.3.13",
    "babel-register": "^6.4.3",
    "eslint": "^1.0.0",
    "mocha": "^2.2.5"
  },
  "gitHead": "9e72b94da729346c9a2fcd70b37401893683426c",
  "homepage": "https://github.com/jridgewell/babel-plugin-incremental-dom#readme",
  "keywords": [
    "babel-plugin",
    "transform",
    "incremental-dom",
    "jsx"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "babel-plugin-incremental-dom",
  "optionalDependencies": {},
  "readme": "# babel-plugin-incremental-dom [![Build Status](https://travis-ci.org/jridgewell/babel-plugin-incremental-dom.svg?branch=master)](https://travis-ci.org/jridgewell/babel-plugin-incremental-dom)\n\nTurn JSX into [Incremental DOM](http://google.github.io/incremental-dom/).\n\n## Example\n\n**In**\n\n```javascript\nexport default function render(data) {\n    var header = data.conditional ? <div /> : null;\n    var collection = data.items.map((item) => {\n        return <li key={item.id} class={item.className}>{item.name}</li>;\n    });\n\n    return <div id=\"container\">\n        {header}\n        <ul>{collection}</ul>\n        <p {...data.props}>Some features</p>\n    </div>;\n}\n```\n\n**Out** (default, unoptimized options)\n\n```javascript\nexport default function render(data) {\n    var header = data.conditional ? _jsxWrapper(function () {\n        return elementVoid(\"div\");\n    }) : null;\n    var collection = data.items.map(function (item) {\n        return _jsxWrapper(function (_item$id, _item$className, _item$name) {\n            elementOpen(\"li\", _item$id, [\"key\", _item$id], \"class\", _item$className);\n\n            _renderArbitrary(_item$name);\n\n            return elementClose(\"li\");\n        }, [item.id, item.className, item.name]);\n    });\n\n    elementOpen(\"div\", null, [\"id\", \"container\"]);\n\n    _renderArbitrary(header);\n\n    elementOpen(\"ul\");\n\n    _renderArbitrary(collection);\n\n    elementClose(\"ul\");\n    elementOpenStart(\"p\");\n\n    _forOwn(data.props, _attr);\n\n    elementOpenEnd(\"p\");\n    text(\"Some features\");\n    elementClose(\"p\");\n    return elementClose(\"div\");\n}\n\nvar _jsxWrapper = function _jsxWrapper(func, args) {\n    var wrapper = args ? function wrapper() {\n        return func.apply(this, args);\n    } : func;\n    wrapper.__jsxDOMWrapper = true;\n    return wrapper;\n};\n\nvar _attr = function _attr(value, name) {\n    attr(name, value);\n};\n\nvar _hasOwn = Object.prototype.hasOwnProperty;\n\nvar _forOwn = function _forOwn(object, iterator) {\n    for (var prop in object) {\n        if (_hasOwn.call(object, prop)) iterator(object[prop], prop);\n    }\n};\n\nvar _renderArbitrary = function _renderArbitrary(child) {\n    var type = typeof child;\n\n    if (type === \"number\" || type === \"string\" || child && child instanceof String) {\n        text(child);\n    } else if (type === \"function\" && child.__jsxDOMWrapper) {\n        child();\n    } else if (Array.isArray(child)) {\n        child.forEach(_renderArbitrary);\n    } else {\n        _forOwn(child, _renderArbitrary);\n    }\n};\n```\n\n## Installation\n\n```sh\n$ npm install babel-plugin-incremental-dom\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\n```json\n{\n  \"presets\": [\"es2015\"],\n  \"plugins\": [\"incremental-dom\"]\n}\n```\n\nAn optional [function prefix](#function-prefix), [runtime](#runtime),\nand [hoist boolean](#hoist) may be passed.\n\n### Via CLI\n\n```sh\n$ babel --plugins incremental-dom script.js\n```\n\n### Via Node API\n\n```javascript\nrequire(\"babel-core\").transform(\"code\", {\n  \"presets\": [\"es2015\"],\n  \"plugins\": [\"incremental-dom\"],\n});\n```\n\nAn optional [function prefix](#function-prefix), [runtime](#runtime),\nand [hoist boolean](#hoist) may be passed.\n\n### Options\n\n#### Hoist\n\nYou may enable the experimental `hoist` option to hoist static attribute\narrays and element wrappers to the highest available scope. This avoids\nexpensive instance allocations when running the render function multiple\ntimes.\n\n```js\nvar _statics = [\"id\", \"container\"];\n\nfunction render(data) {\n    return elementVoid(\"div\", null, _statics);\n}\n```\n\nTo do this, simply add the `hoist` option to the Incremental DOM plugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"hoist\": true\n    }\n  ]],\n}\n```\n\n#### Function Prefix\n\nBy deafult, `babel-plugin-incremental-dom` directly calls Incremental\nDOM functions:\n\n```js\nelementOpen(\"div\");\nelementClose(\"div\");\n```\n\nIf you are instead including Incremental DOM via a browser script, it\nmay be easier to reference the functions from the `IncrementalDOM` object:\n\n```js\nIncrementalDOM.elementOpen(\"div\");\nIncrementalDOM.elementClose(\"div\");\n```\n\nTo do this, simply add the `prefix` option to the Incremental DOM\nplugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"prefix\": \"IncrementalDOM\"\n    }\n  ]],\n}\n```\n\n#### Component as reference\n\nYou may enable the experimental `componentAsReference` option so that JSX tags\nthat start with an upper case letter are passed as a reference to incremental\nDOM calls, instead of as a string. This can be useful when your code implements\ncomponents through these kind of calls, though that's not done by incremental\nDOM automatically. Note that this will break unless you have code to handle it.\n\n\n```js\n// Before\n<MyComponent />;\n```\n\n```js\n// After\nelementVoid(MyComponent);\n```\n\nTo do this, simply add the `componentAsReference` option to the Incremental DOM\nplugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"componentAsReference\": true\n    }\n  ]],\n}\n```\n\n#### Runtime\n\nBy deafult, `babel-plugin-incremental-dom` injects several helpers into\neach file as needed. When transforming multiple files with JSX, you can\navoid this helper duplication by specifying a runtime library to use\ninstead.\n\nThe runtime's required functions are:\n\n- `attr`\n\n  Not to be confused with IncrementalDOM's own `#attr` function, the\n  runtime's `attr` must take in a `value` and `attrName` and call\n  IncrementalDOM's `#attr`. Basically, it flip flops its parameters so\n  that `IncrementalDOM#attr` can be used in a `Array#forEach` like\n  method signature.\n\n  ```js\n  runtime.attr = function(value, attrName) {\n    IncrementalDOM.attr(attrName, value);\n  };\n  ```\n\n- `forOwn`\n\n  No surprises here, this iterates over every enumerable-own property of\n  `object`, calling `iterator` with the property's value and name.\n\n  ```js\n  runtime.forOwn = function(object, iterator) {\n    var hasOwn = Object.prototype.hasOwnProperty;\n    for (var prop in object) {\n      if (hasOwn.call(object, prop)) {\n        iterator(object[prop], prop);\n      }\n    }\n  };\n  ```\n\n- `jsxWrapper`\n\n  To prevent iDOM's incremental nature from screwing up our beautiful\n  JSX syntax, certain elements must be wrapped in a function closure\n  that will be later evaluated. That closure will be passed into\n  `jsxWrapper`, along with an array of any (if any) arguments\n  needed to render the contained JSX element.\n\n  Note it is not `jsxWrapper`'s responsibility to create the JSX\n  closure, merely to help identify the passed in closure later. Here, we\n  set the `__jsxDOMWrapper` property of the returned closure.\n\n  ```js\n  runtime.jsxWrapper = function(elementClosure, args) {\n    var wrapper = args ? function() {\n      return elementClosure.apply(this, args);\n    } : jsxClosure;\n    wrapper.__jsxDOMWrapper = true;\n    return wrapper;\n  }\n  ```\n\n- `renderArbitrary`\n\n  To render child elements correctly, we'll need to be able to identify\n  them. `renderArbitrary` receives a `child`, and must call the\n  appropriate action. For string and numbers, that's to call\n  `IncrementalDOM#text`. For wrapped JSX Closures, that's to invoke the\n  closure. For arrays, that's to render every element. And for objects,\n  that's to render every property.\n\n  Note that we identify JSX Closures by the `__jsxDOMWrapper` property\n  we set inside the `jsxWrapper` runtime function.\n\n  ```js\n  runtime.renderArbitrary = function _renderArbitrary(child) {\n    var type = typeof child;\n    if (type === \"number\" || (type === string || child && child instanceof String)) {\n      IncrementalDOM.text(child);\n    } else if (type === \"function\" && child.__jsxDOMWrapper) {\n      child();\n    } else if (Array.isArray(child)) {\n      child.forEach(_renderArbitrary);\n    } else if (String(child) === \"[object Object]\") {\n      runtime.forOwn(child, _renderArbitrary);\n    }\n  }\n  ```\n\nTo do this, simply add the `runtime` option to the Incremental DOM\nplugin:\n\n```json\n{\n  \"plugins\": [[\n    \"incremental-dom\", {\n      \"runtime\": \"iDOMHelpers\"\n    }\n  ]],\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jridgewell/babel-plugin-incremental-dom.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib --copy-files",
    "lint": "eslint src",
    "preversion": "npm test",
    "test": "mocha --compilers js:babel-register && npm run lint",
    "version": "npm run build"
  },
  "version": "3.0.3"
}
