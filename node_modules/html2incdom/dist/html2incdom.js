(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['exports', './unescape'], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require('./unescape'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.unescape);
		global.HTML2IncDom = mod.exports;
	}
})(this, function (exports, _unescape) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _unescape2 = _interopRequireDefault(_unescape);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];
				descriptor.enumerable = descriptor.enumerable || false;
				descriptor.configurable = true;
				if ("value" in descriptor) descriptor.writable = true;
				Object.defineProperty(target, descriptor.key, descriptor);
			}
		}

		return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);
			if (staticProps) defineProperties(Constructor, staticProps);
			return Constructor;
		};
	}();

	var parser_;

	var HTML2IncDom = function () {
		function HTML2IncDom() {
			_classCallCheck(this, HTML2IncDom);
		}

		_createClass(HTML2IncDom, null, [{
			key: 'buildFn',
			value: function buildFn(html) {
				return function () {
					return HTML2IncDom.run(html);
				};
			}
		}, {
			key: 'getParser',
			value: function getParser() {
				return parser_ || window.HTMLParser;
			}
		}, {
			key: 'run',
			value: function run(html) {
				HTML2IncDom.getParser()(html, {
					start: function start(tag, attrs, unary) {
						var fn = unary ? IncrementalDOM.elementVoid : IncrementalDOM.elementOpen;
						var args = [tag, null, []];
						for (var i = 0; i < attrs.length; i++) {
							args.push(attrs[i].name, attrs[i].value);
						}
						fn.apply(null, args);
					},

					end: function end(tag) {
						IncrementalDOM.elementClose(tag);
					},

					chars: function chars(text) {
						IncrementalDOM.text(text, _unescape2.default);
					}
				});
			}
		}, {
			key: 'setParser',
			value: function setParser(newParser) {
				parser_ = newParser;
			}
		}]);

		return HTML2IncDom;
	}();

	exports.default = HTML2IncDom;
});