{"version":3,"sources":["incremental-dom.js","src/assertions.js","src/notifications.js","src/context.js","src/util.js","src/node_data.js","src/symbols.js","src/attributes.js","src/nodes.js","src/core.js","src/virtual_elements.js"],"names":[],"mappings":"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","file":"incremental-dom.js","sourcesContent":["\n/**\n * @license\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  factory((global.IncrementalDOM = {}));\n}(this, function (exports) { 'use strict';\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n\n  /**\n    * Keeps track whether or not we are in an attributes declaration (after\n    * elementOpenStart, but before elementOpenEnd).\n    * @type {boolean}\n    */\n  var inAttributes = false;\n\n\n  /**\n    * Keeps track whether or not we are in an element that should not have its\n    * children cleared.\n    * @type {boolean}\n    */\n  var inSkip = false;\n\n\n  /**\n   * Makes sure that there is a current patch context.\n   * @param {*} context\n   */\n  var assertInPatch = function(context) {\n    if (!context) {\n      throw new Error('Cannot call currentElement() unless in patch');\n    }\n  };\n\n\n  /**\n  * Makes sure that keyed Element matches the tag name provided.\n  * @param {!string} nodeName The nodeName of the node that is being matched.\n  * @param {string=} tag The tag name of the Element.\n  * @param {?string=} key The key of the Element.\n  */\n  var assertKeyedTagMatches = function(nodeName, tag, key) {\n    if (nodeName !== tag) {\n      throw new Error('Was expecting node with key \"' + key + '\" to be a ' +\n          tag + ', not a ' + nodeName + '.');\n    }\n  };\n\n\n  /**\n   * Makes sure that a patch closes every node that it opened.\n   * @param {?Node} openElement\n   * @param {!Node|!DocumentFragment} root\n   */\n  var assertNoUnclosedTags = function(openElement, root) {\n    if (openElement === root) {\n      return;\n    }\n\n    var currentElement = openElement;\n    var openTags = [];\n    while (currentElement && currentElement !== root) {\n      openTags.push(currentElement.nodeName.toLowerCase());\n      currentElement = currentElement.parentNode;\n    }\n\n    throw new Error('One or more tags were not closed:\\n' +\n        openTags.join('\\n'));\n  };\n\n\n  /**\n   * Makes sure that the caller is not where attributes are expected.\n   * @param {string} functionName\n   */\n  var assertNotInAttributes = function(functionName) {\n    if (inAttributes) {\n      throw new Error(functionName + '() may not be called between ' +\n          'elementOpenStart() and elementOpenEnd().');\n    }\n  };\n\n\n  /**\n   * Makes sure that the caller is not inside an element that has declared skip.\n   * @param {string} functionName\n   */\n  var assertNotInSkip = function(functionName) {\n    if (inSkip) {\n      throw new Error(functionName + '() may not be called inside an element ' +\n          'that has called skip().');\n    }\n  };\n\n\n  /**\n   * Makes sure that the caller is where attributes are expected.\n   * @param {string} functionName\n   */\n  var assertInAttributes = function(functionName) {\n    if (!inAttributes) {\n      throw new Error(functionName + '() must be called after ' +\n          'elementOpenStart().');\n    }\n  };\n\n\n  /**\n   * Makes sure the patch closes virtual attributes call\n   */\n  var assertVirtualAttributesClosed = function() {\n    if (inAttributes) {\n      throw new Error('elementOpenEnd() must be called after calling ' +\n          'elementOpenStart().');\n    }\n  };\n\n\n  /**\n    * Makes sure that placeholders have a key specified. Otherwise, conditional\n    * placeholders and conditional elements next to placeholders will cause\n    * placeholder elements to be re-used as non-placeholders and vice versa.\n    * @param {string} key\n    */\n  var assertPlaceholderKeySpecified = function(key) {\n    if (!key) {\n      throw new Error('Placeholder elements must have a key specified.');\n    }\n  };\n\n\n  /**\n    * Makes sure that tags are correctly nested.\n    * @param {string} nodeName\n    * @param {string} tag\n    */\n  var assertCloseMatchesOpenTag = function(nodeName, tag) {\n    if (nodeName !== tag) {\n      throw new Error('Received a call to close ' + tag + ' but ' +\n          nodeName + ' was open.');\n    }\n  };\n\n\n  /**\n   * Makes sure that no children elements have been declared yet in the current\n   * element.\n   * @param {string} functionName\n   * @param {?Node} previousNode\n   */\n  var assertNoChildrenDeclaredYet = function(functionName, previousNode) {\n    if (previousNode !== null) {\n      throw new Error(functionName + '() must come before any child ' +\n          'declarations inside the current element.');\n    }\n  };\n\n\n  /**\n   * Updates the state of being in an attribute declaration.\n   * @param {boolean} value\n   * @return {boolean} the previous value.\n   */\n  var setInAttributes = function(value) {\n    var previous = inAttributes;\n    inAttributes = value;\n    return previous;\n  };\n\n\n  /**\n   * Updates the state of being in a skip element.\n   * @param {boolean} value\n   * @return {boolean} the previous value.\n   */\n  var setInSkip = function(value) {\n    var previous = inSkip;\n    inSkip = value;\n    return previous;\n  };\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /** */\n  exports.notifications = {\n    /**\n     * Called after patch has compleated with any Nodes that have been created\n     * and added to the DOM.\n     * @type {?function(Array<!Node>)}\n     */\n    nodesCreated: null,\n\n    /**\n     * Called after patch has compleated with any Nodes that have been removed\n     * from the DOM.\n     * Note it's an applications responsibility to handle any childNodes.\n     * @type {?function(Array<!Node>)}\n     */\n    nodesDeleted: null\n  };\n\n  /**\n   * Keeps track of the state of a patch.\n   * @constructor\n   */\n  function Context() {\n    /**\n     * @type {(Array<!Node>|undefined)}\n     */\n    this.created = exports.notifications.nodesCreated && [];\n\n    /**\n     * @type {(Array<!Node>|undefined)}\n     */\n    this.deleted = exports.notifications.nodesDeleted && [];\n  }\n\n\n  /**\n   * @param {!Node} node\n   */\n  Context.prototype.markCreated = function(node) {\n    if (this.created) {\n      this.created.push(node);\n    }\n  };\n\n\n  /**\n   * @param {!Node} node\n   */\n  Context.prototype.markDeleted = function(node) {\n    if (this.deleted) {\n      this.deleted.push(node);\n    }\n  };\n\n\n  /**\n   * Notifies about nodes that were created during the patch opearation.\n   */\n  Context.prototype.notifyChanges = function() {\n    if (this.created && this.created.length > 0) {\n      exports.notifications.nodesCreated(this.created);\n    }\n\n    if (this.deleted && this.deleted.length > 0) {\n      exports.notifications.nodesDeleted(this.deleted);\n    }\n  };\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n\n  /**\n   * A cached reference to the hasOwnProperty function.\n   */\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n  /**\n   * A cached reference to the create function.\n   */\n  var create = Object.create;\n\n\n  /**\n   * Used to prevent property collisions between our \"map\" and its prototype.\n   * @param {!Object<string, *>} map The map to check.\n   * @param {string} property The property to check.\n   * @return {boolean} Whether map has property.\n   */\n  var has = function(map, property) {\n    return hasOwnProperty.call(map, property);\n  };\n\n\n  /**\n   * Creates an map object without a prototype.\n   * @return {!Object}\n   */\n  var createMap = function() {\n    return create(null);\n  };\n\n  /**\n   * Keeps track of information needed to perform diffs for a given DOM node.\n   * @param {!string} nodeName\n   * @param {?string=} key\n   * @constructor\n   */\n  function NodeData(nodeName, key) {\n    /**\n     * The attributes and their values.\n     * @const {!Object<string, *>}\n     */\n    this.attrs = createMap();\n\n    /**\n     * An array of attribute name/value pairs, used for quickly diffing the\n     * incomming attributes to see if the DOM node's attributes need to be\n     * updated.\n     * @const {Array<*>}\n     */\n    this.attrsArr = [];\n\n    /**\n     * The incoming attributes for this Node, before they are updated.\n     * @const {!Object<string, *>}\n     */\n    this.newAttrs = createMap();\n\n    /**\n     * The key used to identify this node, used to preserve DOM nodes when they\n     * move within their parent.\n     * @const\n     */\n    this.key = key;\n\n    /**\n     * Keeps track of children within this node by their key.\n     * {?Object<string, !Element>}\n     */\n    this.keyMap = null;\n\n    /**\n     * Whether or not the keyMap is currently valid.\n     * {boolean}\n     */\n    this.keyMapValid = true;\n\n    /**\n     * The node name for this node.\n     * @const {string}\n     */\n    this.nodeName = nodeName;\n\n    /**\n     * @type {?string}\n     */\n    this.text = null;\n  }\n\n\n  /**\n   * Initializes a NodeData object for a Node.\n   *\n   * @param {Node} node The node to initialize data for.\n   * @param {string} nodeName The node name of node.\n   * @param {?string=} key The key that identifies the node.\n   * @return {!NodeData} The newly initialized data object\n   */\n  var initData = function(node, nodeName, key) {\n    var data = new NodeData(nodeName, key);\n    node['__incrementalDOMData'] = data;\n    return data;\n  };\n\n\n  /**\n   * Retrieves the NodeData object for a Node, creating it if necessary.\n   *\n   * @param {Node} node The node to retrieve the data for.\n   * @return {!NodeData} The NodeData for this Node.\n   */\n  var getData = function(node) {\n    var data = node['__incrementalDOMData'];\n\n    if (!data) {\n      var nodeName = node.nodeName.toLowerCase();\n      var key = null;\n\n      if (node instanceof Element) {\n        key = node.getAttribute('key');\n      }\n\n      data = initData(node, nodeName, key);\n    }\n\n    return data;\n  };\n\n  /**\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *      http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports.symbols = {\n    default: '__default',\n\n    placeholder: '__placeholder'\n  };\n\n  /**\n   * Applies an attribute or property to a given Element. If the value is null\n   * or undefined, it is removed from the Element. Otherwise, the value is set\n   * as an attribute.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {?(boolean|number|string)=} value The attribute's value.\n   */\n  exports.applyAttr = function(el, name, value) {\n    if (value == null) {\n      el.removeAttribute(name);\n    } else {\n      el.setAttribute(name, value);\n    }\n  };\n\n  /**\n   * Applies a property to a given Element.\n   * @param {!Element} el\n   * @param {string} name The property's name.\n   * @param {*} value The property's value.\n   */\n  exports.applyProp = function(el, name, value) {\n    el[name] = value;\n  };\n\n\n  /**\n   * Applies a style to an Element. No vendor prefix expansion is done for\n   * property names/values.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} style The style to set. Either a string of css or an object\n   *     containing property-value pairs.\n   */\n  var applyStyle = function(el, name, style) {\n    if (typeof style === 'string') {\n      el.style.cssText = style;\n    } else {\n      el.style.cssText = '';\n      var elStyle = el.style;\n      var obj = /** @type {!Object<string,string>} */(style);\n\n      for (var prop in obj) {\n        if (has(obj, prop)) {\n          elStyle[prop] = obj[prop];\n        }\n      }\n    }\n  };\n\n\n  /**\n   * Updates a single attribute on an Element.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} value The attribute's value. If the value is an object or\n   *     function it is set on the Element, otherwise, it is set as an HTML\n   *     attribute.\n   */\n  var applyAttributeTyped = function(el, name, value) {\n    var type = typeof value;\n\n    if (type === 'object' || type === 'function') {\n      exports.applyProp(el, name, value);\n    } else {\n      exports.applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n    }\n  };\n\n\n  /**\n   * Calls the appropriate attribute mutator for this attribute.\n   * @param {!Element} el\n   * @param {string} name The attribute's name.\n   * @param {*} value The attribute's value.\n   */\n  var updateAttribute = function(el, name, value) {\n    var data = getData(el);\n    var attrs = data.attrs;\n\n    if (attrs[name] === value) {\n      return;\n    }\n\n    var mutator = exports.attributes[name] || exports.attributes[exports.symbols.default];\n    mutator(el, name, value);\n\n    attrs[name] = value;\n  };\n\n\n  /**\n   * A publicly mutable object to provide custom mutators for attributes.\n   * @const {!Object<string, function(!Element, string, *)>}\n   */\n  exports.attributes = createMap();\n\n  // Special generic mutator that's called for any attribute that does not\n  // have a specific mutator.\n  exports.attributes[exports.symbols.default] = applyAttributeTyped;\n\n  exports.attributes[exports.symbols.placeholder] = function() {};\n\n  exports.attributes['style'] = applyStyle;\n\n  /**\n   * Gets the namespace to create an element (of a given tag) in.\n   * @param {string} tag The tag to get the namespace for.\n   * @param {?Node} parent\n   * @return {?string} The namespace to create the tag in.\n   */\n  var getNamespaceForTag = function(tag, parent) {\n    if (tag === 'svg') {\n      return 'http://www.w3.org/2000/svg';\n    }\n\n    if (getData(parent).nodeName === 'foreignObject') {\n      return null;\n    }\n\n    return parent.namespaceURI;\n  };\n\n\n  /**\n   * Creates an Element.\n   * @param {Document} doc The document with which to create the Element.\n   * @param {?Node} parent\n   * @param {string} tag The tag for the Element.\n   * @param {?string=} key A key to identify the Element.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element.\n   * @return {!Element}\n   */\n  var createElement = function(doc, parent, tag, key, statics) {\n    var namespace = getNamespaceForTag(tag, parent);\n    var el;\n\n    if (namespace) {\n      el = doc.createElementNS(namespace, tag);\n    } else {\n      el = doc.createElement(tag);\n    }\n\n    initData(el, tag, key);\n\n    if (statics) {\n      for (var i = 0; i < statics.length; i += 2) {\n        updateAttribute(el, /** @type {!string}*/(statics[i]), statics[i + 1]);\n      }\n    }\n\n    return el;\n  };\n\n\n  /**\n   * Creates a Text Node.\n   * @param {Document} doc The document with which to create the Element.\n   * @return {!Text}\n   */\n  var createText = function(doc) {\n    var node = doc.createTextNode('');\n    initData(node, '#text', null);\n    return node;\n  };\n\n\n  /**\n   * Creates a mapping that can be used to look up children using a key.\n   * @param {?Node} el\n   * @return {!Object<string, !Element>} A mapping of keys to the children of the\n   *     Element.\n   */\n  var createKeyMap = function(el) {\n    var map = createMap();\n    var children = el.children;\n    var count = children.length;\n\n    for (var i = 0; i < count; i += 1) {\n      var child = children[i];\n      var key = getData(child).key;\n\n      if (key) {\n        map[key] = child;\n      }\n    }\n\n    return map;\n  };\n\n\n  /**\n   * Retrieves the mapping of key to child node for a given Element, creating it\n   * if necessary.\n   * @param {?Node} el\n   * @return {!Object<string, !Node>} A mapping of keys to child Elements\n   */\n  var getKeyMap = function(el) {\n    var data = getData(el);\n\n    if (!data.keyMap) {\n      data.keyMap = createKeyMap(el);\n    }\n\n    return data.keyMap;\n  };\n\n\n  /**\n   * Retrieves a child from the parent with the given key.\n   * @param {?Node} parent\n   * @param {?string=} key\n   * @return {?Node} The child corresponding to the key.\n   */\n  var getChild = function(parent, key) {\n    return key ? getKeyMap(parent)[key] : null;\n  };\n\n\n  /**\n   * Registers an element as being a child. The parent will keep track of the\n   * child using the key. The child can be retrieved using the same key using\n   * getKeyMap. The provided key should be unique within the parent Element.\n   * @param {?Node} parent The parent of child.\n   * @param {string} key A key to identify the child with.\n   * @param {!Node} child The child to register.\n   */\n  var registerChild = function(parent, key, child) {\n    getKeyMap(parent)[key] = child;\n  };\n\n  /** @type {?Context} */\n  var context = null;\n\n  /** @type {?Node} */\n  var currentNode;\n\n  /** @type {?Node} */\n  var currentParent;\n\n  /** @type {?Node} */\n  var previousNode;\n\n  /** @type {?Element|?DocumentFragment} */\n  var root;\n\n  /** @type {?Document} */\n  var doc;\n\n\n  /**\n   * Patches the document starting at el with the provided function. This function\n   * may be called during an existing patch operation.\n   * @param {!Element|!DocumentFragment} node The Element or Document\n   *     to patch.\n   * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n   *     calls that describe the DOM.\n   * @param {T=} data An argument passed to fn to represent DOM state.\n   * @template T\n   */\n  exports.patch = function(node, fn, data) {\n    var prevContext = context;\n    var prevRoot = root;\n    var prevDoc = doc;\n    var prevCurrentNode = currentNode;\n    var prevCurrentParent = currentParent;\n    var prevPreviousNode = previousNode;\n    var previousInAttributes = false;\n    var previousInSkip = false;\n\n    context = new Context();\n    root = node;\n    doc = node.ownerDocument;\n    currentNode = node;\n    currentParent = null;\n    previousNode = null;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    enterNode();\n    fn(data);\n    exitNode();\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      assertNoUnclosedTags(previousNode, node);\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    root = prevRoot;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n    previousNode = prevPreviousNode;\n  };\n\n\n  /**\n   * Checks whether or not the current node matches the specified nodeName and\n   * key.\n   *\n   * @param {?string} nodeName The nodeName for this node.\n   * @param {?string=} key An optional key that identifies a node.\n   * @return {boolean} True if the node matches, false otherwise.\n   */\n  var matches = function(nodeName, key) {\n    var data = getData(currentNode);\n\n    // Key check is done using double equals as we want to treat a null key the\n    // same as undefined. This should be okay as the only values allowed are\n    // strings, null and undefined so the == semantics are not too weird.\n    return nodeName === data.nodeName && key == data.key;\n  };\n\n\n  /**\n   * Aligns the virtual Element definition with the actual DOM, moving the\n   * corresponding DOM node to the correct location or creating it if necessary.\n   * @param {string} nodeName For an Element, this should be a valid tag string.\n   *     For a Text, this should be #text.\n   * @param {?string=} key The key used to identify this element.\n   * @param {?Array<*>=} statics For an Element, this should be an array of\n   *     name-value pairs.\n   */\n  var alignWithDOM = function(nodeName, key, statics) {\n    if (currentNode && matches(nodeName, key)) {\n      return;\n    }\n\n    var node;\n\n    // Check to see if the node has moved within the parent.\n    if (key) {\n      node = getChild(currentParent, key);\n      if (node && process.env.NODE_ENV !== 'production') {\n        assertKeyedTagMatches(getData(node).nodeName, nodeName, key);\n      }\n    }\n\n    // Create the node if it doesn't exist.\n    if (!node) {\n      if (nodeName === '#text') {\n        node = createText(doc);\n      } else {\n        node = createElement(doc, currentParent, nodeName, key, statics);\n      }\n\n      if (key) {\n        registerChild(currentParent, key, node);\n      }\n\n      context.markCreated(node);\n    }\n\n    // If the node has a key, remove it from the DOM to prevent a large number\n    // of re-orders in the case that it moved far or was completely removed.\n    // Since we hold on to a reference through the keyMap, we can always add it\n    // back.\n    if (currentNode && getData(currentNode).key) {\n      currentParent.replaceChild(node, currentNode);\n      getData(currentParent).keyMapValid = false;\n    } else {\n      currentParent.insertBefore(node, currentNode);\n    }\n\n    currentNode = node;\n  };\n\n\n  /**\n   * Clears out any unvisited Nodes, as the corresponding virtual element\n   * functions were never called for them.\n   */\n  var clearUnvisitedDOM = function() {\n    var node = currentParent;\n    var data = getData(node);\n    var keyMap = data.keyMap;\n    var keyMapValid = data.keyMapValid;\n    var child = node.lastChild;\n    var key;\n\n    if (child === previousNode && keyMapValid) {\n      return;\n    }\n\n    if (data.attrs[exports.symbols.placeholder] && node !== root) {\n      return;\n    }\n\n    while (child !== previousNode) {\n      node.removeChild(child);\n      context.markDeleted(/** @type {!Node}*/(child));\n\n      key = getData(child).key;\n      if (key) {\n        delete keyMap[key];\n      }\n      child = node.lastChild;\n    }\n\n    // Clean the keyMap, removing any unusued keys.\n    if (!keyMapValid) {\n      for (key in keyMap) {\n        child = keyMap[key];\n        if (child.parentNode !== node) {\n          context.markDeleted(child);\n          delete keyMap[key];\n        }\n      }\n\n      data.keyMapValid = true;\n    }\n  };\n\n\n  /**\n   * Changes to the first child of the current node.\n   */\n  var enterNode = function() {\n    currentParent = currentNode;\n    currentNode = currentNode.firstChild;\n    previousNode = null;\n  };\n\n\n  /**\n   * Changes to the next sibling of the current node.\n   */\n  var nextNode = function() {\n    previousNode = currentNode;\n    currentNode = currentNode.nextSibling;\n  };\n\n\n  /**\n   * Changes to the parent of the current node, removing any unvisited children.\n   */\n  var exitNode = function() {\n    clearUnvisitedDOM();\n\n    previousNode = currentParent;\n    currentNode = currentParent.nextSibling;\n    currentParent = currentParent.parentNode;\n  };\n\n\n  /**\n   * Makes sure that the current node is an Element with a matching tagName and\n   * key.\n   *\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @return {!Element} The corresponding Element.\n   */\n  var _elementOpen = function(tag, key, statics) {\n    alignWithDOM(tag, key, statics);\n    enterNode();\n    return /** @type {!Element} */(currentParent);\n  };\n\n\n  /**\n   * Closes the currently open Element, removing any unvisited children if\n   * necessary.\n   *\n   * @return {!Element} The corresponding Element.\n   */\n  var _elementClose = function() {\n    if (process.env.NODE_ENV !== 'production') {\n      setInSkip(false);\n    }\n\n    exitNode();\n    return /** @type {!Element} */(previousNode);\n  };\n\n\n  /**\n   * Makes sure the current node is a Text node and creates a Text node if it is\n   * not.\n   *\n   * @return {!Text} The corresponding Text Node.\n   */\n  var _text = function() {\n    alignWithDOM('#text', null, null);\n    nextNode();\n    return /** @type {!Text} */(previousNode);\n  };\n\n\n  /**\n   * Gets the current Element being patched.\n   * @return {!Element}\n   */\n  exports.currentElement = function() {\n    if (process.env.NODE_ENV !== 'production') {\n      assertInPatch(context);\n      assertNotInAttributes('currentElement');\n    }\n    return /** @type {!Element} */(currentParent);\n  };\n\n\n  /**\n   * Skips the children in a subtree, allowing an Element to be closed without\n   * clearing out the children.\n   */\n  exports.skip = function() {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNoChildrenDeclaredYet('skip', previousNode);\n      setInSkip(true);\n    }\n    previousNode = currentParent.lastChild;\n  };\n\n  /**\n   * The offset in the virtual element declaration where the attributes are\n   * specified.\n   * @const\n   */\n  var ATTRIBUTES_OFFSET = 3;\n\n\n  /**\n   * Builds an array of arguments for use with elementOpenStart, attr and\n   * elementOpenEnd.\n   * @const {Array<*>}\n   */\n  var argsBuilder = [];\n\n\n  /**\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  exports.elementOpen = function(tag, key, statics, var_args) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes('elementOpen');\n      assertNotInSkip('elementOpen');\n    }\n\n    var node = _elementOpen(tag, key, statics);\n    var data = getData(node);\n\n    /*\n     * Checks to see if one or more attributes have changed for a given Element.\n     * When no attributes have changed, this is much faster than checking each\n     * individual argument. When attributes have changed, the overhead of this is\n     * minimal.\n     */\n    var attrsArr = data.attrsArr;\n    var newAttrs = data.newAttrs;\n    var attrsChanged = false;\n    var i = ATTRIBUTES_OFFSET;\n    var j = 0;\n\n    for (; i < arguments.length; i += 1, j += 1) {\n      if (attrsArr[j] !== arguments[i]) {\n        attrsChanged = true;\n        break;\n      }\n    }\n\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsChanged = true;\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    if (attrsChanged) {\n      for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n        newAttrs[arguments[i]] = arguments[i + 1];\n      }\n\n      for (var attr in newAttrs) {\n        updateAttribute(node, attr, newAttrs[attr]);\n        newAttrs[attr] = undefined;\n      }\n    }\n\n    return node;\n  };\n\n\n  /**\n   * Declares a virtual Element at the current location in the document. This\n   * corresponds to an opening tag and a elementClose tag is required. This is\n   * like elementOpen, but the attributes are defined using the attr function\n   * rather than being passed as arguments. Must be folllowed by 0 or more calls\n   * to attr, then a call to elementOpenEnd.\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   */\n  exports.elementOpenStart = function(tag, key, statics) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes('elementOpenStart');\n      setInAttributes(true);\n    }\n\n    argsBuilder[0] = tag;\n    argsBuilder[1] = key;\n    argsBuilder[2] = statics;\n  };\n\n\n  /***\n   * Defines a virtual attribute at this point of the DOM. This is only valid\n   * when called between elementOpenStart and elementOpenEnd.\n   *\n   * @param {string} name\n   * @param {*} value\n   */\n  exports.attr = function(name, value) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertInAttributes('attr');\n    }\n\n    argsBuilder.push(name, value);\n  };\n\n\n  /**\n   * Closes an open tag started with elementOpenStart.\n   * @return {!Element} The corresponding Element.\n   */\n  exports.elementOpenEnd = function() {\n    if (process.env.NODE_ENV !== 'production') {\n      assertInAttributes('elementOpenEnd');\n      setInAttributes(false);\n    }\n\n    var node = exports.elementOpen.apply(null, argsBuilder);\n    argsBuilder.length = 0;\n    return node;\n  };\n\n\n  /**\n   * Closes an open virtual Element.\n   *\n   * @param {string} tag The element's tag.\n   * @return {!Element} The corresponding Element.\n   */\n  exports.elementClose = function(tag) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes('elementClose');\n    }\n\n    var node = _elementClose();\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n    }\n\n    return node;\n  };\n\n\n  /**\n   * Declares a virtual Element at the current location in the document that has\n   * no children.\n   * @param {string} tag The element's tag.\n   * @param {?string=} key The key used to identify this element. This can be an\n   *     empty string, but performance may be better if a unique value is used\n   *     when iterating over an array of items.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  exports.elementVoid = function(tag, key, statics, var_args) {\n    var node = exports.elementOpen.apply(null, arguments);\n    exports.elementClose.apply(null, arguments);\n    return node;\n  };\n\n\n  /**\n   * Declares a virtual Element at the current location in the document that is a\n   * placeholder element. Children of this Element can be manually managed and\n   * will not be cleared by the library.\n   *\n   * A key must be specified to make sure that this node is correctly preserved\n   * across all conditionals.\n   *\n   * @param {string} tag The element's tag.\n   * @param {string} key The key used to identify this element.\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n   *     static attributes for the Element. These will only be set once when the\n   *     Element is created.\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n   *     for the Element.\n   * @return {!Element} The corresponding Element.\n   */\n  exports.elementPlaceholder = function(tag, key, statics, var_args) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertPlaceholderKeySpecified(key);\n    }\n\n    exports.elementOpen.apply(null, arguments);\n    exports.skip();\n    return exports.elementClose.apply(null, arguments);\n  };\n\n\n  /**\n   * Declares a virtual Text at this point in the document.\n   *\n   * @param {string|number|boolean} value The value of the Text.\n   * @param {...(function((string|number|boolean)):string)} var_args\n   *     Functions to format the value which are called only when the value has\n   *     changed.\n   * @return {!Text} The corresponding text node.\n   */\n  exports.text = function(value, var_args) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertNotInAttributes('text');\n      assertNotInSkip('text');\n    }\n\n    var node = _text();\n    var data = getData(node);\n\n    if (data.text !== value) {\n      data.text = /** @type {string} */(value);\n\n      var formatted = value;\n      for (var i = 1; i < arguments.length; i += 1) {\n        formatted = arguments[i](formatted);\n      }\n\n      node.data = formatted;\n    }\n\n    return node;\n  };\n\n}));\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n  * Keeps track whether or not we are in an attributes declaration (after\n  * elementOpenStart, but before elementOpenEnd).\n  * @type {boolean}\n  */\nvar inAttributes = false;\n\n\n/**\n  * Keeps track whether or not we are in an element that should not have its\n  * children cleared.\n  * @type {boolean}\n  */\nvar inSkip = false;\n\n\n/**\n * Makes sure that there is a current patch context.\n * @param {*} context\n */\nvar assertInPatch = function(context) {\n  if (!context) {\n    throw new Error('Cannot call currentElement() unless in patch');\n  }\n};\n\n\n/**\n* Makes sure that keyed Element matches the tag name provided.\n* @param {!string} nodeName The nodeName of the node that is being matched.\n* @param {string=} tag The tag name of the Element.\n* @param {?string=} key The key of the Element.\n*/\nvar assertKeyedTagMatches = function(nodeName, tag, key) {\n  if (nodeName !== tag) {\n    throw new Error('Was expecting node with key \"' + key + '\" to be a ' +\n        tag + ', not a ' + nodeName + '.');\n  }\n};\n\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param {?Node} openElement\n * @param {!Node|!DocumentFragment} root\n */\nvar assertNoUnclosedTags = function(openElement, root) {\n  if (openElement === root) {\n    return;\n  }\n\n  var currentElement = openElement;\n  var openTags = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' +\n      openTags.join('\\n'));\n};\n\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n * @param {string} functionName\n */\nvar assertNotInAttributes = function(functionName) {\n  if (inAttributes) {\n    throw new Error(functionName + '() may not be called between ' +\n        'elementOpenStart() and elementOpenEnd().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n * @param {string} functionName\n */\nvar assertNotInSkip = function(functionName) {\n  if (inSkip) {\n    throw new Error(functionName + '() may not be called inside an element ' +\n        'that has called skip().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is where attributes are expected.\n * @param {string} functionName\n */\nvar assertInAttributes = function(functionName) {\n  if (!inAttributes) {\n    throw new Error(functionName + '() must be called after ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nvar assertVirtualAttributesClosed = function() {\n  if (inAttributes) {\n    throw new Error('elementOpenEnd() must be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n  * Makes sure that placeholders have a key specified. Otherwise, conditional\n  * placeholders and conditional elements next to placeholders will cause\n  * placeholder elements to be re-used as non-placeholders and vice versa.\n  * @param {string} key\n  */\nvar assertPlaceholderKeySpecified = function(key) {\n  if (!key) {\n    throw new Error('Placeholder elements must have a key specified.');\n  }\n};\n\n\n/**\n  * Makes sure that tags are correctly nested.\n  * @param {string} nodeName\n  * @param {string} tag\n  */\nvar assertCloseMatchesOpenTag = function(nodeName, tag) {\n  if (nodeName !== tag) {\n    throw new Error('Received a call to close ' + tag + ' but ' +\n        nodeName + ' was open.');\n  }\n};\n\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n * @param {string} functionName\n * @param {?Node} previousNode\n */\nvar assertNoChildrenDeclaredYet = function(functionName, previousNode) {\n  if (previousNode !== null) {\n    throw new Error(functionName + '() must come before any child ' +\n        'declarations inside the current element.');\n  }\n};\n\n\n/**\n * Updates the state of being in an attribute declaration.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nvar setInAttributes = function(value) {\n  var previous = inAttributes;\n  inAttributes = value;\n  return previous;\n};\n\n\n/**\n * Updates the state of being in a skip element.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nvar setInSkip = function(value) {\n  var previous = inSkip;\n  inSkip = value;\n  return previous;\n};\n\n\n/** */\nexport {\n  assertInPatch,\n  assertKeyedTagMatches,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertInAttributes,\n  assertPlaceholderKeySpecified,\n  assertCloseMatchesOpenTag,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertNotInSkip,\n  setInAttributes,\n  setInSkip\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** */\nvar notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A cached reference to the create function.\n */\nvar create = Object.create;\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nvar has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nvar createMap = function() {\n  return create(null);\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {?Object<string, !Element>}\n   */\n  this.keyMap = null;\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nvar initData = function(node, nodeName, key) {\n  var data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {Node} node The node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nvar getData = function(node) {\n  var data = node['__incrementalDOMData'];\n\n  if (!data) {\n    var nodeName = node.nodeName.toLowerCase();\n    var key = null;\n\n    if (node instanceof Element) {\n      key = node.getAttribute('key');\n    }\n\n    data = initData(node, nodeName, key);\n  }\n\n  return data;\n};\n\n\n/** */\nexport {\n  getData,\n  initData\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar symbols = {\n  default: '__default',\n\n  placeholder: '__placeholder'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nvar applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    el.setAttribute(name, value);\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nvar applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nvar applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    var elStyle = el.style;\n    var obj = /** @type {!Object<string,string>} */(style);\n\n    for (var prop in obj) {\n      if (has(obj, prop)) {\n        elStyle[prop] = obj[prop];\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nvar applyAttributeTyped = function(el, name, value) {\n  var type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nvar updateAttribute = function(el, name, value) {\n  var data = getData(el);\n  var attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  var mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nvar attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes[symbols.placeholder] = function() {};\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { updateAttribute } from './attributes';\nimport {\n    getData,\n    initData\n} from './node_data';\nimport { createMap } from './util';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nvar getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element.\n * @return {!Element}\n */\nvar createElement = function(doc, parent, tag, key, statics) {\n  var namespace = getNamespaceForTag(tag, parent);\n  var el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  if (statics) {\n    for (var i = 0; i < statics.length; i += 2) {\n      updateAttribute(el, /** @type {!string}*/(statics[i]), statics[i + 1]);\n    }\n  }\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nvar createText = function(doc) {\n  var node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/**\n * Creates a mapping that can be used to look up children using a key.\n * @param {?Node} el\n * @return {!Object<string, !Element>} A mapping of keys to the children of the\n *     Element.\n */\nvar createKeyMap = function(el) {\n  var map = createMap();\n  var children = el.children;\n  var count = children.length;\n\n  for (var i = 0; i < count; i += 1) {\n    var child = children[i];\n    var key = getData(child).key;\n\n    if (key) {\n      map[key] = child;\n    }\n  }\n\n  return map;\n};\n\n\n/**\n * Retrieves the mapping of key to child node for a given Element, creating it\n * if necessary.\n * @param {?Node} el\n * @return {!Object<string, !Node>} A mapping of keys to child Elements\n */\nvar getKeyMap = function(el) {\n  var data = getData(el);\n\n  if (!data.keyMap) {\n    data.keyMap = createKeyMap(el);\n  }\n\n  return data.keyMap;\n};\n\n\n/**\n * Retrieves a child from the parent with the given key.\n * @param {?Node} parent\n * @param {?string=} key\n * @return {?Node} The child corresponding to the key.\n */\nvar getChild = function(parent, key) {\n  return key ? getKeyMap(parent)[key] : null;\n};\n\n\n/**\n * Registers an element as being a child. The parent will keep track of the\n * child using the key. The child can be retrieved using the same key using\n * getKeyMap. The provided key should be unique within the parent Element.\n * @param {?Node} parent The parent of child.\n * @param {string} key A key to identify the child with.\n * @param {!Node} child The child to register.\n */\nvar registerChild = function(parent, key, child) {\n  getKeyMap(parent)[key] = child;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText,\n  getChild,\n  registerChild\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText,\n  getChild,\n  registerChild\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport { symbols } from './symbols';\nimport {\n  assertInPatch,\n  assertKeyedTagMatches,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport { notifications } from './notifications';\n\n\n/** @type {?Context} */\nvar context = null;\n\n/** @type {?Node} */\nvar currentNode;\n\n/** @type {?Node} */\nvar currentParent;\n\n/** @type {?Node} */\nvar previousNode;\n\n/** @type {?Element|?DocumentFragment} */\nvar root;\n\n/** @type {?Document} */\nvar doc;\n\n\n/**\n * Patches the document starting at el with the provided function. This function\n * may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @template T\n */\nvar patch = function(node, fn, data) {\n  var prevContext = context;\n  var prevRoot = root;\n  var prevDoc = doc;\n  var prevCurrentNode = currentNode;\n  var prevCurrentParent = currentParent;\n  var prevPreviousNode = previousNode;\n  var previousInAttributes = false;\n  var previousInSkip = false;\n\n  context = new Context();\n  root = node;\n  doc = node.ownerDocument;\n  currentNode = node;\n  currentParent = null;\n  previousNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    previousInAttributes = setInAttributes(false);\n    previousInSkip = setInSkip(false);\n  }\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertVirtualAttributesClosed();\n    assertNoUnclosedTags(previousNode, node);\n    setInAttributes(previousInAttributes);\n    setInSkip(previousInSkip);\n  }\n\n  context.notifyChanges();\n\n  context = prevContext;\n  root = prevRoot;\n  doc = prevDoc;\n  currentNode = prevCurrentNode;\n  currentParent = prevCurrentParent;\n  previousNode = prevPreviousNode;\n};\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nvar matches = function(nodeName, key) {\n  var data = getData(currentNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n * @param {?Array<*>=} statics For an Element, this should be an array of\n *     name-value pairs.\n */\nvar alignWithDOM = function(nodeName, key, statics) {\n  if (currentNode && matches(nodeName, key)) {\n    return;\n  }\n\n  var node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    node = getChild(currentParent, key);\n    if (node && process.env.NODE_ENV !== 'production') {\n      assertKeyedTagMatches(getData(node).nodeName, nodeName, key);\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key, statics);\n    }\n\n    if (key) {\n      registerChild(currentParent, key, node);\n    }\n\n    context.markCreated(node);\n  }\n\n  // If the node has a key, remove it from the DOM to prevent a large number\n  // of re-orders in the case that it moved far or was completely removed.\n  // Since we hold on to a reference through the keyMap, we can always add it\n  // back.\n  if (currentNode && getData(currentNode).key) {\n    currentParent.replaceChild(node, currentNode);\n    getData(currentParent).keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nvar clearUnvisitedDOM = function() {\n  var node = currentParent;\n  var data = getData(node);\n  var keyMap = data.keyMap;\n  var keyMapValid = data.keyMapValid;\n  var child = node.lastChild;\n  var key;\n\n  if (child === previousNode && keyMapValid) {\n    return;\n  }\n\n  if (data.attrs[symbols.placeholder] && node !== root) {\n    return;\n  }\n\n  while (child !== previousNode) {\n    node.removeChild(child);\n    context.markDeleted(/** @type {!Node}*/(child));\n\n    key = getData(child).key;\n    if (key) {\n      delete keyMap[key];\n    }\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nvar enterNode = function() {\n  currentParent = currentNode;\n  currentNode = currentNode.firstChild;\n  previousNode = null;\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nvar nextNode = function() {\n  previousNode = currentNode;\n  currentNode = currentNode.nextSibling;\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nvar exitNode = function() {\n  clearUnvisitedDOM();\n\n  previousNode = currentParent;\n  currentNode = currentParent.nextSibling;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @return {!Element} The corresponding Element.\n */\nvar elementOpen = function(tag, key, statics) {\n  alignWithDOM(tag, key, statics);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nvar elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(previousNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nvar text = function() {\n  alignWithDOM('#text', null, null);\n  nextNode();\n  return /** @type {!Text} */(previousNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nvar currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch(context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nvar skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', previousNode);\n    setInSkip(true);\n  }\n  previousNode = currentParent.lastChild;\n};\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patch,\n  currentElement,\n  skip\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText,\n  currentElement,\n  skip\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertPlaceholderKeySpecified,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nvar ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nvar argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  var node = coreElementOpen(tag, key, statics);\n  var data = getData(node);\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  var attrsArr = data.attrsArr;\n  var newAttrs = data.newAttrs;\n  var attrsChanged = false;\n  var i = ATTRIBUTES_OFFSET;\n  var j = 0;\n\n  for (; i < arguments.length; i += 1, j += 1) {\n    if (attrsArr[j] !== arguments[i]) {\n      attrsChanged = true;\n      break;\n    }\n  }\n\n  for (; i < arguments.length; i += 1, j += 1) {\n    attrsArr[j] = arguments[i];\n  }\n\n  if (j < attrsArr.length) {\n    attrsChanged = true;\n    attrsArr.length = j;\n  }\n\n  /*\n   * Actually perform the attribute update.\n   */\n  if (attrsChanged) {\n    for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n      newAttrs[arguments[i]] = arguments[i + 1];\n    }\n\n    for (var attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nvar elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nvar attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name, value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nvar elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  var node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nvar elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  var node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementVoid = function(tag, key, statics, var_args) {\n  var node = elementOpen.apply(null, arguments);\n  elementClose.apply(null, arguments);\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that is a\n * placeholder element. Children of this Element can be manually managed and\n * will not be cleared by the library.\n *\n * A key must be specified to make sure that this node is correctly preserved\n * across all conditionals.\n *\n * @param {string} tag The element's tag.\n * @param {string} key The key used to identify this element.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementPlaceholder = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertPlaceholderKeySpecified(key);\n  }\n\n  elementOpen.apply(null, arguments);\n  skip();\n  return elementClose.apply(null, arguments);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nvar text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  var node = coreText();\n  var data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    var formatted = value;\n    for (var i = 1; i < arguments.length; i += 1) {\n      formatted = arguments[i](formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  elementPlaceholder,\n  text,\n  attr\n};\n"],"sourceRoot":"/source/"}